/student/tests.c: |+
    #include <stdlib.h>
    #include <time.h>
    #include <stdio.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    void test_myfunc_ret() {
        set_test_metadata("factorial", _("test the function factorial"), 1);

        srand(time(NULL));
        int i = rand()%12;
        while (i<2)
            i= rand()%12;
        int ret1 = 0;
        int ret2 = 0;
        int ret3 = 0;

        SANDBOX_BEGIN;
        ret1 = factorial(i);
        ret2 = factorial(0);
        ret3 = factorial(1);
        SANDBOX_END;

        int sol = i;
        for(int j = i-1; j>0; j--)
            sol = sol*j;

        CU_ASSERT_EQUAL(ret1, sol);
        CU_ASSERT_EQUAL(ret2, 1);
        CU_ASSERT_EQUAL(ret3, 1);

        if (sol!=ret1){
            char *errtpl = _("factorial returns the wrong value: you returned %d for %d");
            char errmsg[strlen(errtpl+30)];
            sprintf(errmsg, errtpl, ret1, i);
            push_info_msg(errmsg);
        }
        if (1!=ret2){
            char *errtpl = _("factorial returns the wrong value: you returned %d for %d");
            char errmsg[strlen(errtpl+30)];
            sprintf(errmsg, errtpl, ret2, 0);
            push_info_msg(errmsg);
        }
        if (1!=ret3){
            char *errtpl = _("factorial returns the wrong value: you returned %d for %d");
            char errmsg[strlen(errtpl+30)];
            sprintf(errmsg, errtpl, ret2, 1);
            push_info_msg(errmsg);
        }
    }

    int main(int argc,char** argv)
    {
        BAN_FUNCS();
        RUN(test_myfunc_ret);
    }

accessible: true
author: Mathieu Xhonneux
context: The factorial of a number *n!* is defined as ``n! = 1*2*3*...*(n-1)*n``,
    with *0! = 1*.
environment: cpp
evaluate: best
groups: false
limits:
    time: '30'
    output: '2'
    memory: '100'
name: '[S2] Factorial'
network_grading: false
order: 3
problems:
    facto:
        header: |-
            Write your own function factorial, who shall follow this prototype :

            .. code-block:: c

                int factorial(int n);

            You don't have to define any headers, just the function itself.
        type: code
        language: c
        name: Factorial
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
