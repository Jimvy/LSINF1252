/student/CTester/wrap_sleep.c: |
    #include <sys/types.h>
    #include <unistd.h>
    #include <stdio.h>
    #include "wrap.h" // system call wrapper

    // unsigned int sleep(unsigned int seconds);

    unsigned int __real_sleep(unsigned int);

    extern bool wrap_monitoring;
    extern struct wrap_stats_t stats;
    extern struct wrap_monitor_t monitored;
    extern struct wrap_fail_t failures;


    void init_sleep() {
      // nothing to do
    }

    void clean_sleep() {
      // nothing to do
    }

    void resetstats_sleep() {
      stats.sleep.called=0;
      stats.sleep.last_return=0;
      stats.sleep.last_arg=0;
    }

    unsigned int __wrap_sleep(unsigned int time) {
      if(!wrap_monitoring || !monitored.sleep) {
        return __real_sleep(time);
      }

      stats.sleep.called++;
      stats.sleep.last_arg = time;
      // being monitored
      if (FAIL(failures.sleep)) {
        failures.sleep=NEXT(failures.sleep);
        stats.sleep.last_return=failures.sleep_ret;
        return failures.sleep_ret;
      }
      failures.sleep=NEXT(failures.sleep);
      // did not fail

      unsigned int ret=__real_sleep(time);
      stats.sleep.last_return=ret;
      return ret;
    }
accessible: true
author: Mathieu Xhonneux & Maxime Mawait
context: |-
    The system call malloc may fail, for instance if the OS has no free memory remaining. In this case, it may be possible that some other processes free some memory after some time.

    In our program, instead of reporting an error immediately if no free memory is available, we will wait some time to see if the OS can free memory for us.
environment: pyjavacpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S3] Sleepy memory'
network_grading: false
order: 14
problems:
    sleep_malloc:
        name: Sleepy malloc
        language: c
        header: |-
            Write the body of the function *sleepy_malloc*.

            Hint : think about static variables.

            .. code-block:: c

                /* Wrapper to the malloc system call.
                 * If malloc fails, sleep for 5 seconds, and re-try.
                 * If malloc failed 10 times in a row, return NULL.
                 */
                void *sleepy_malloc(size_t s) {
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
