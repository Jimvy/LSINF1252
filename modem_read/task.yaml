/student/tests.c: |
    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    int8_t* tab1;

    void test_42_right1() {
        set_test_metadata("modem", _("test1 for 42 contained"), 1);

        if(!tab1) CU_FAIL(_("malloc failed"));

        int ret = 0;

        int i;
        for(i = 0; i < 64; i++){
            tab1[i] = i;
        }

        void * p = trap_buffer(64, TRAP_RIGHT, PROT_READ, (void*) tab1);

        monitored.malloc = true;
        monitored.free = true;
        failures.malloc = 1;
        failures.malloc_ret = p;
        SANDBOX_BEGIN;
        ret = has_42();
        SANDBOX_END;

        CU_ASSERT_EQUAL(ret,1);

        CU_ASSERT_EQUAL(stats.malloc.called,1);

        CU_ASSERT_EQUAL(stats.free.called,1);
    }

    void test_42_left1() {
        set_test_metadata("modem", _("test2 for 42 contained, left trapped"), 1);

        if(!tab1) CU_FAIL(_("malloc failed"));

        int ret = 0;

        int i;
        for(i = 0; i < 64; i++){
            tab1[i] = i;
        }

        void * p = trap_buffer(64, TRAP_LEFT, PROT_READ, (void*) tab1);

        monitored.malloc = true;
        monitored.free = true;
        failures.malloc = 1;
        failures.malloc_ret = p;
        SANDBOX_BEGIN;
        ret = has_42();
        SANDBOX_END;

        printf("%d\n", ret);

        CU_ASSERT_EQUAL(ret,1);

        CU_ASSERT_EQUAL(stats.malloc.called,1);

        CU_ASSERT_EQUAL(stats.free.called,1);
    }

    void test_42_right2() {
        set_test_metadata("modem", _("test2 for 42 contained"), 1);

        if(!tab1) CU_FAIL(_("malloc failed"));

        int ret = 0;

        int i;
        for(i = 0; i < 64; i++){
            tab1[i] = 64 - i;
        }

        void * p = trap_buffer(64, TRAP_RIGHT, PROT_READ, (void*) tab1);

        monitored.malloc = true;
        monitored.free = true;
        failures.malloc = 1;
        failures.malloc_ret = p;
        SANDBOX_BEGIN;
        ret = has_42();
        SANDBOX_END;

        CU_ASSERT_EQUAL(ret,1);

        CU_ASSERT_EQUAL(stats.malloc.called,1);

        CU_ASSERT_EQUAL(stats.free.called,1);
    }

    void test_42_left2() {
        set_test_metadata("modem", _("test2 for 42 contained, left trapped"), 1);

        if(!tab1) CU_FAIL(_("malloc failed"));

        int ret = 0;

        int i;
        for(i = 0; i < 64; i++){
            tab1[i] = 64 - i;
        }

        void * p = trap_buffer(64, TRAP_LEFT, PROT_READ, (void*) tab1);

        monitored.malloc = true;
        monitored.free = true;
        failures.malloc = 1;
        failures.malloc_ret = p;
        SANDBOX_BEGIN;
        ret = has_42();
        SANDBOX_END;

        printf("%d\n", ret);

        CU_ASSERT_EQUAL(ret,1);

        CU_ASSERT_EQUAL(stats.malloc.called,1);

        CU_ASSERT_EQUAL(stats.free.called,1);
    }

    void test_no42_right() {
        set_test_metadata("modem", _("test2 for 42 not contained"), 1);

        if(!tab1) CU_FAIL(_("malloc failed"));

        int ret = 0;

        int i;
        for(i = 0; i < 64; i++){
            tab1[i] = 128 - i;
        }

        void * p = trap_buffer(64, TRAP_RIGHT, PROT_READ, (void*) tab1);

        monitored.malloc = true;
        monitored.free = true;
        failures.malloc = 1;
        failures.malloc_ret = p;
        SANDBOX_BEGIN;
        ret = has_42();
        SANDBOX_END;

        CU_ASSERT_EQUAL(ret,0);

        CU_ASSERT_EQUAL(stats.malloc.called,1);

        CU_ASSERT_EQUAL(stats.free.called,1);
    }

    void test_no42_left() {
        set_test_metadata("modem", _("test2 for 42 not contained, left trapped"), 1);

        if(!tab1) CU_FAIL(_("malloc failed"));

        int ret = 0;

        int i;
        for(i = 0; i < 64; i++){
            tab1[i] = 128 - i;
        }

        void * p = trap_buffer(64, TRAP_LEFT, PROT_READ, (void*) tab1);

        monitored.malloc = true;
        monitored.free = true;
        failures.malloc = 1;
        failures.malloc_ret = p;
        SANDBOX_BEGIN;
        ret = has_42();
        SANDBOX_END;

        CU_ASSERT_EQUAL(ret,0);

        CU_ASSERT_EQUAL(stats.malloc.called,1);

        CU_ASSERT_EQUAL(stats.free.called,1);
    }

    void test_fail() {
        set_test_metadata("modem", _("test for malloc failed"), 1);

        if(!tab1) CU_FAIL(_("malloc failed"));

        int ret = 0;

        monitored.malloc = true;
        monitored.free = true;
        failures.malloc = FAIL_ALWAYS;
        SANDBOX_BEGIN;
        ret = has_42();
        SANDBOX_END;

        CU_ASSERT_EQUAL(ret,-1);

        CU_ASSERT_EQUAL(stats.malloc.called,1);

        CU_ASSERT_EQUAL(stats.free.called,0);
    }

    int main(int argc,char** argv)
    {
        tab1 = (int8_t*) malloc(64);
        BAN_FUNCS();
        RUN(test_42_right1, test_42_right2, test_no42_right, test_fail);
        free(tab1);
    }
accessible: true
author: Mathieu Xhonneux & Maxime Mawait
context: |-
    You are in 1977 and want to read your e-mail with your freshly bought Apple II. You are connected to the ARPANET through a modem, but unfortunately the modem's manufacturer has only given a single function `modem_read`, to read the data received by the modem, with the following prototype :

    ``void modem_read(void *buffer, int *buf_len);``

    It fills the given buffer with the data received from the modem, and writes the number of bytes written to the value pointed by *buf_len*. It can write up to maximum 256 bytes in a single call. This function is guaranteed to succeed.
environment: pyjavacpp
evaluate: best
groups: false
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[S3] Reading from the wire'
network_grading: false
order: 22
problems:
    modem:
        header: |-
            You want to know if one e-mail you received contains the byte 42.
            Write the body of the function *has_42*, this function has to use *malloc* to create the buffer :

            .. code-block:: c

                /* has_42
                 * @return: 1 if the modem received a byte containing 42, else 0, -1 if an error has happened.
                int has_42() {
        language: c
        type: code
        name: '42'
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
