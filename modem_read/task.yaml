accessible: true
author: Mathieu Xhonneux & Maxime Mawait
context: |-
    Back in 1977, you want to read your e-mail with your freshly bought Apple II. You are connected to the ARPANET through a modem, but unfortunately the modem's manufacturer has only given a single function ``modem_read``, to read the data received by the modem, with the following prototype :

    ``void modem_read(void *buffer, int *buf_len);``

    This function fills the supplied buffer with the data received from the modem (an array of ``char``), and writes the number of bytes written to the value pointed by ``buf_len``. It can write up to maximum 256 bytes in a single call. This function is guaranteed to return.
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S3] Reading from the wire '
network_grading: false
order: 38
problems:
    modem:
        header: |-
            You want to know if the information that you received from the modem you received contains a byte whose numerical value is ``42``.
            Write the body of the function ``has_42``, this function has to use ``malloc`` to create the buffer before calling ``modem_read``:

            .. code-block:: c

                /*
                 * @return: 1 if the modem received a byte containing 42
                 *         else 0, -1 if an error has happened.
                 */
                int has_42() {
        language: c
        type: code
        name: '42'
        default: ''
stored_submissions: 0
submission_limit:
    amount: 12
    period: 1
tags:
    '0':
        id: timeout
        type: 1
        name: Timeout
        description: Your code exceeds the maximum allowed time.
        visible: true
    '1':
        name: Segmentation Fault
        description: ''
        visible: true
        id: sigsegv
        type: 1
    '2':
        id: not_compile
        description: You code does not compile.
        type: 1
        visible: true
        name: Not compile
    '3':
        id: memory
        description: ''
        visible: true
        name: Memory Exceeded
        type: 1
    '4':
        description: ''
        id: sigfpe
        type: 1
        name: Floating Point Exception
        visible: true
    '5':
        description: Your code produced a double free.
        type: 1
        id: double_free
        name: Double free
        visible: true
    '6':
        visible: true
        name: Banned functions
        description: You use some banned functions.
        type: 1
        id: banned_funcs
    '7':
        type: 2
        visible: true
        name: S3
        description: ''
        id: ''
    '8':
        description: Task about pointers and their use
        name: Pointer
        visible: true
        type: 2
        id: ''
weight: 1.0
