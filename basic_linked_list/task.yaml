/student/Makefile: |+
    CC=gcc
    EXEC=tests
    LDFLAGS=-lcunit -lm -lpthread -ldl -rdynamic
    SRC=$(wildcard *.c) CTester/wrap_mutex.c CTester/wrap_malloc.c CTester/wrap_file.c CTester/CTester.c CTester/trap.c
    OBJ=$(SRC:.c=.o)
    CFLAGS=-Wall -Werror -DC99 -std=gnu99 -ICTester
    WRAP=-Wl,-wrap=pthread_mutex_lock -Wl,-wrap=pthread_mutex_unlock -Wl,-wrap=pthread_mutex_trylock -Wl,-wrap=pthread_mutex_init -Wl,-wrap=pthread_mutex_destroy -Wl,-wrap=malloc -Wl,-wrap=free -Wl,-wrap=realloc -Wl,-wrap=calloc -Wl,-wrap=open -Wl,-wrap=creat -Wl,-wrap=close -Wl,-wrap=read -Wl,-wrap=write -Wl,-wrap=stat -Wl,-wrap=fstat -Wl,-wrap=lseek -Wl,-wrap=exit

    all: $(EXEC)

    %.o: %.c
        $(CC) $(CFLAGS) -c -o $@ $<

    $(EXEC): $(OBJ)
        $(CC) $(WRAP) -o $@ $(OBJ) $(LDFLAGS)

    create-po:
        mkdir -p po/fr/
        xgettext --keyword=_ --language=C --add-comments --sort-output --from-code=UTF-8 -o po/tests.pot $(SRC)
        msginit --input=po/tests.pot --locale=fr_BE.utf8 --output=po/fr/tests.po

    update-po:
        xgettext --keyword=_ --language=C --add-comments --sort-output --from-code=UTF-8 -o po/tests.pot $(SRC)
        msgmerge --update po/fr/tests.po po/tests.pot

    compile-mo:
        msgfmt --no-hash --output-file=po/fr/tests.mo po/fr/tests.po
        mkdir -p fr/LC_MESSAGES/
        cp po/fr/tests.mo fr/LC_MESSAGES/tests.mo

    clean:
        rm -f $(EXEC) $(OBJ)

    .PHONY: tests

accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: |+
    We ask you to write two primitives needed to implement a simple linked list.

    **In your functions, you cannot use the function \``calloc\``**

    .. code-block:: c

        /**
        * Structure node
        *
        * @next: pointer to the next node in the list, NULL if last node_t
        * @value: value of the node
        */
        typedef struct node {
          struct node *next;
          int value;
        } node_t;

        /**
        * Structure list
        *
        * @first: first node of the list, NULL if empty
        * @size: number of nodes in the list
        */
        typedef struct list {
          struct node *first;
          int *size;
        } list_t;


environment: pyjavacpp
evaluate: best
groups: false
limits:
    output: '2'
    time: '30'
    memory: '100'
name: '[S3] Basic linked list'
network_grading: false
order: 15
problems:
    init_node:
        language: c
        type: code
        header: |
            .. code-block:: c

                /*
                * Create a new node in memory with the value @value.
                *
                * @value: value of the node
                * @return: return the pointer to the new node, or NULL if a failure occured.
                */
                node_t *init_node(int value) {
        name: Node initialisation
    add_node:
        header: |
            .. code-block:: c

                /*
                * Add an element to the head of the list @list and update its member `size`
                *
                * @l: list of integers
                * @value: value to add to the list
                *
                * @return: 0 if success, 1 else
                */
                int add_node(list_t *list, int value);
        type: code
        name: Adding a node
        language: c
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        visible: true
        name: Data structures
        type: 2
        description: Task dealing with data structures and linked list
        id: ''
weight: 1.0
