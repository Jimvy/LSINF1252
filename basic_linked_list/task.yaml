accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: |+
    We ask you to write two primitives needed to implement a simple linked list.

    **In your functions, you cannot use the function \``calloc\``**

    .. code-block:: c

        /**
        * Structure node
        *
        * @next: pointer to the next node in the list, NULL if last node_t
        * @value: value of the node
        */
        typedef struct node {
          struct node *next;
          int value;
        } node_t;

        /**
        * Structure list
        *
        * @first: first node of the list, NULL if empty
        * @size: number of nodes in the list
        */
        typedef struct list {
          struct node *first;
          int *size;
        } list_t;


environment: cpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S3] Basic linked list - CHANGE REQUESTED - malloc(1)'
network_grading: false
order: 29
problems:
    init_node:
        name: Node initialisation
        language: c
        type: code
        header: |
            .. code-block:: c

                /*
                * Create a new node in memory with the value @value.
                *
                * @value: value of the node
                * @return: return the pointer to the new node, or NULL if a failure occured.
                */
                node_t *init_node(int value) {
    add_node:
        type: code
        language: c
        name: Adding a node
        header: |
            .. code-block:: c

                /*
                * Add an element to the head of the list @list and update its member `size`
                *
                * @l: list of integers
                * @value: value to add to the list
                *
                * @return: 0 if success, 1 else
                */
                int add_node(list_t *list, int value);
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Timeout
        type: 1
        id: timeout
        visible: true
        description: Your code exceeds the maximum allowed time.
    '1':
        type: 1
        visible: true
        name: Segmentation Fault
        id: sigsegv
        description: ''
    '2':
        visible: true
        description: You code does not compile.
        id: not_compile
        type: 1
        name: Not compile
    '3':
        name: Memory Exceeded
        visible: true
        description: ''
        type: 1
        id: memory
    '4':
        id: sigfpe
        name: Floating Point Exception
        description: ''
        visible: true
        type: 1
    '5':
        visible: true
        description: Your code produced a double free.
        id: double_free
        name: Double free
        type: 1
    '6':
        id: banned_funcs
        name: Banned functions
        type: 1
        description: You use some banned functions.
        visible: true
    '7':
        description: Task dealing with data structures and linked list
        visible: true
        type: 2
        name: Data structures
        id: ''
    '8':
        name: S3
        type: 2
        description: ''
        visible: true
        id: ''
weight: 1.0
