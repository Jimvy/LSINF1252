/student/tests.c: |
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    void free_node_corr(node_t* node){
      if (!node->next)
        free(node->next);

      free(node);
    }

    void test_init_node_alloc(){
      set_test_metadata("init_node", _("Check memory allocation of the node"), 1);

      node_t* ret = NULL;

      monitored.malloc = true;

      SANDBOX_BEGIN;
      ret = init_node(0);
      SANDBOX_END;

      CU_ASSERT_EQUAL(stats.malloc.called, 1);
      CU_ASSERT_TRUE(malloced((void*) ret));
      CU_ASSERT_PTR_NOT_NULL(ret);

      free_node_corr(ret);

    }

    void test_init_node_value(){
      set_test_metadata("init_node", _("Check the value of the node"), 1);

      node_t* ret = NULL;

      SANDBOX_BEGIN;
      ret = init_node(10);
      SANDBOX_END;

      CU_ASSERT_EQUAL(ret->value, 10);
      CU_ASSERT_PTR_NULL(ret->next);
      free_node_corr(ret);

      SANDBOX_BEGIN;
      ret = init_node(25136984);
      SANDBOX_END;

      CU_ASSERT_EQUAL(ret->value, 25136984);
      CU_ASSERT_PTR_NULL(ret->next);

      free_node_corr(ret);
    }

    void test_init_node_nomem(){
      set_test_metadata("init_node", _("Check the return value if malloc call fails"), 1);

      node_t* ret = NULL;

      monitored.malloc = true;
      failures.malloc = FAIL_ALWAYS;
      failures.malloc_ret = NULL;

      SANDBOX_BEGIN;
      ret = init_node(0);
      SANDBOX_END;

      CU_ASSERT_PTR_NULL(ret);
    }


    int main(int argc,char** argv)
    {

        RUN(test_init_node_alloc, test_init_node_value, test_init_node_nomem) ;
    }
accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: |+
    On vous demande d'implémenter une liste chaînée de base. Pour ce faire, vous devrez manipuler des pointeurs.

    .. code-block:: c

        /**
        * Structure node
        *
        * @next: pointer to the next node in the list, NULL if last node_t
        * @value: value of the node
        */
        typedef struct node{
          struct node* next;
          int value;
        } node_t;

        /**
        * Structure list
        *
        * @first: first node of the list, NULL if empty
        * @size: number of nodes in the list.
        */
        typedef struct list{
          struct node* first;
          int* size;
        } list_t  ;


environment: pyjavacpp
evaluate: best
groups: false
limits:
    output: '2'
    time: '30'
    memory: '100'
name: '[S3] Liste chaînée basique'
network_grading: false
problems:
    init_node:
        language: c
        name: Initialisation d'un noeud
        header: |
            .. code-block:: c

                /*
                * Create a new node with the value @value
                *
                * @value: value of the node
                * @return: return the pointer to the new node, NULL either.
                */
                node_t* init_node(int value){
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
