accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: |
    For this task, you will implement a binary search on a binary tree. A binary tree has the following structure:

    .. image:: BST/bst.png
        :height: 340px
        :width: 540px
        :scale: 100%


    For this, you have the code of the node stucture:

    .. code-block:: c

        /*
        * Node has a value, @value, and two children, @left and @right.
        * All the children of @left and himself have a smaller value then the node and all the children of @right and himself have a bigger value then node
        */
        typedef struct node{
            int value;
            struct node* left;
            struct node* right;
        } node_t;

    And you have the code of the binary structure:

    .. code-block:: c

        typedef struct bt{
            struct node* root;
        } bt_t;
environment: cpp
evaluate: best
groups: false
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S4] Binary Search Tree'
network_grading: false
order: 30
problems:
    contains:
        header: |-
            Write the body of contains method. If you use submethods, write them in the location below.

            .. code-block:: c

                /*
                * Return 1 if @value is in @tree or 0 if it isn't.
                */
                int contains(bt_t* tree, int value){
        name: Methode contains
        type: code
        language: c
    other:
        header: Write here the submethods used by the contains method.
        name: Helpfull submethods
        type: code
        optional: 'on'
        language: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Data structures
        type: 2
        description: Task dealing with data structures and linked list
        visible: true
        id: ''
weight: 1.0
