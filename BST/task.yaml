accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: |
    For this task, you will implement a simple binary search on an existing binary tree. A binary tree has the following structure:

    .. image:: BST/bst.png
        :height: 340px
        :width: 540px
        :scale: 100%


    This binary tree is composed of nodes implemented using the following structure.

    .. code-block:: c

        /*
        * Node has a value, @value, and two children, @left and @right.
        * All the children of @left and itself have a smaller value than the node and all the children of @right and itself have a larger value than node
        */
        typedef struct node{
            int value;
            struct node* left; // to smaller values
            struct node* right; // to larger values
        } node_t;

    The binary tree itself is defined as follows.

    .. code-block:: c

        typedef struct bt{
            struct node* root;
        } bt_t;
environment: cpp
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[S3] Simple Binary Search Tree'
network_grading: false
order: 33
problems:
    contains:
        type: code
        language: c
        header: |-
            Write the body of the ``contains`` function. If you use subfunctions, write them in the box below with their signature and body.

            .. code-block:: c

                /*
                * Return 1 if there is a node containing @value in @tree and 0 otherwise.
                */
                int contains(bt_t* tree, int value){
        name: Function contains
    other:
        header: Write here the submethods used by the contains method.
        optional: 'on'
        name: Helpfull submethods
        type: code
        language: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        id: timeout
        type: 1
        name: Timeout
        description: Your code exceeds the maximum allowed time.
        visible: true
    '1':
        visible: true
        description: ''
        type: 1
        name: Segmentation Fault
        id: sigsegv
    '2':
        type: 1
        visible: true
        description: You code does not compile.
        name: Not compile
        id: not_compile
    '3':
        type: 1
        visible: true
        name: Memory Exceeded
        id: memory
        description: ''
    '4':
        type: 1
        name: Floating Point Exception
        visible: true
        id: sigfpe
        description: ''
    '5':
        description: Your code produced a double free.
        id: double_free
        type: 1
        visible: true
        name: Double free
    '6':
        description: You use some banned functions.
        type: 1
        name: Banned functions
        visible: true
        id: banned_funcs
    '7':
        name: Data structures
        type: 2
        description: Task dealing with data structures and linked list.
        visible: true
        id: ''
    '8':
        type: 2
        name: S4
        visible: true
        description: ''
        id: ''
weight: 1.0
