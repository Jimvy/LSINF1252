/student/student_code.c.tpl: |+
    #include <stdio.h>
    #include <stdlib.h>
    #include <errno.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <fcntl.h>
    #include <unistd.h>
    #include <string.h>

    typedef struct 3dpoint{
        double x;
        double y;
        double z;
    } 3dpoint_t;

    int myfunc(char* file_name, char* new_file_name) {
    @    @q1@@
    }


/student/student_code.h: |
    int myfunc(char* file_name, char* new_file_name);
/student/tests.c: |
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    typedef struct 3dpoint{
        double x;
        double y;
        double z;
    } 3dpoint_t;

    /*
     * Generate a file named "file.txt".
     * The content is the bytes in range [0, n[
     */
    int gen_struct(int n){

    }

    /*
     * Test with open fail
     */
    void test_fail_open() {
        set_test_metadata("q1", _("Test fail open"), 1);
        int ret = 0;

        monitored.open = true;
        failures.open = FAIL_TWICE;
        failures.open_ret = -1;

        SANDBOX_BEGIN;
        ret = myfunc("file_that_does_not_exists.txt", "newfile_that_should_not_be_create.txt");
        SANDBOX_END;

        if (ret != -1){
            push_info_msg(_("When the open() function fails, your code does not return -1."));
            CU_FAIL();
        }else{
            set_tag("open");
        }
    }


    /*
     * Test with an empty file
     */
    void test_empty_file() {
        set_test_metadata("q1", _("Test with empty file."), 1);
        gen_file(0);
        int ret = 0;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        system("chmod 644 newfile.txt"); //If student does not set permission correctly, we set it to avoid test error
        if (system("diff file.txt newfile.txt") != 0){
            push_info_msg(_("You copy is not identical."));
            CU_FAIL();
        }
        if (ret != 0){
            push_info_msg(_("When the file is empty, your copy is not identical."));
            CU_FAIL();
        }
    }


    /*
     * Test with some bytes in the file
     */
    void test_file_permission() {
        set_test_metadata("q1", _("Test permissions equal"), 1);
        gen_file(122);

        SANDBOX_BEGIN;
        myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        system("ls -al file.txt | head -c 10 > PERM_A.txt");
        system("ls -al newfile.txt | head -c 10 > PERM_B.txt");
        if (system("diff PERM_A.txt PERM_B.txt") != 0){
            push_info_msg(_("The permission of the two files are not equals."));
            CU_FAIL();
        }else{
            set_tag("permission");
        }
    }



    /*
     * Test with some bytes in the file
     */
    void test_file() {
        set_test_metadata("q1", _("Test with normal file"), 2);
        gen_file(122);
        int ret = 0;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        system("chmod 644 newfile.txt"); //If student does not set permission correctly, we set it to avoid test error
        // S_IRUSR|S_IWUSR = 644
        if (system("diff file.txt newfile.txt") != 0){
            push_info_msg(_("You copy is not identical."));
            CU_FAIL();
        }else{
            set_tag("copy");
        }
        if (ret != 0){
            push_info_msg(_("You do not return 0 when the copy should be successful."));
            CU_FAIL();
        }
    }

    /*
     * Test with some bytes in the file
     */
    void test_file_write_fail() {
        set_test_metadata("q1", _("Test with normal file (with some failures)"), 1);
        gen_file(125);
        int ret = 0;

        monitored.write = true;
        failures.write = FAIL_THIRD;
        failures.write_ret = -1;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        if (ret != -1){
            push_info_msg(_("You do not return -1 when a fail occurs with read() or write()"));
            set_tag("failure_handling");
            CU_FAIL();
        }
    }

    /*
     * Test with some bytes in the file with close()
     */
    void test_close() {
        set_test_metadata("q1", _("Test close()."), 1);
        gen_file(2);

        monitored.close = true;
        monitored.open = true;
        SANDBOX_BEGIN;
        myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        int open_tag = 0;
        if (stats.close.called != 2){
            push_info_msg(_("You did not close() the file."));
            open_tag++;
            CU_FAIL();
        }if (stats.open.called != 2){
            push_info_msg(_("The open should be use two times."));
            open_tag++;
            CU_FAIL();
        }if(open_tag ==  0){
            set_tag("close");
        }
    }


    /*
     * Test original file not modified (content and permissions)
     */
    void test_original_integrity() {
        set_test_metadata("q1", _("Test original file not modified"), 1);
        gen_file(70);
        system("cp file.txt file_original.txt");
        system("ls -al file.txt | head -c 10 > PERM_FILE_1.txt");

        SANDBOX_BEGIN;
        myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        if (system("diff file.txt file_original.txt") != 0){
            push_info_msg(_("You can not modify the original file"));
            CU_FAIL();
            set_tag("original_modif");
        }
        system("ls -al file.txt | head -c 10 > PERM_FILE_2.txt");
        if (system("diff PERM_FILE_1.txt PERM_FILE_2.txt") != 0){
            push_info_msg(_("You can not modify the permissions of the original file."));
            CU_FAIL();
            set_tag("original_modif");
        }
    }

    int main(int argc,char** argv){
        BAN_FUNCS(system);
        RUN(test_fail_open, test_empty_file, test_file_permission, test_file, test_file_write_fail, test_original_integrity, test_close);
    }
accessible: true
author: Olivier Martin
context: |-
    Given an array of ``struct 3dpoint`` defined below, write a C code to write the array of struct into a file named ``save.txt``. You have to write all elements sequentially.

    .. code-block:: c

        typedef struct 3dpoint{
            double x;
            double y;
            double z;
        } 3dpoint_t;
environment: pyjavacpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S5] Save struct into file'
network_grading: false
order: 24
problems:
    q1:
        language: ''
        type: code
        name: ''
        header: |-
            .. code-block:: c

                /*
                 * @pre pt != NULL
                 *      len >= 0, the length of the array.
                 *      filename != NULL
                 * @post write the array of struct in the file.
                 */
                void save(struct 3dpoint pt[], size_t len, char* filename)
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: File
        type: 2
        description: ''
        visible: true
        id: ''
    '1':
        description: ''
        type: 2
        name: S5
        visible: true
        id: ''
weight: 1.0
