/solution.c.sol: |+
    int fd = open(filename,O_WRONLY|O_CREAT|O_TRUNC, 0666);
    if(fd == -1)
        return -1;
    for(int i = 0; i < size; i++){
        if((int)write(fd, (void *) &pt[i], sizeof(point_t)) == -1)
            return -2;
    }
    if(close(fd)<0)
        return -3;
    return 0;




/student/tests.c: |
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    point_t* gen_struct(int size){
        point_t *tab = malloc(size*sizeof(point_t));
        if (tab == NULL){
            CU_FAIL(_("Error, can not initialise test file"));
            return (point_t*)NULL;
        }
        for (int i = 0; i < size; i++){
            tab[i].x = i+i;
            tab[i].y = i+i+i;
            tab[i].z = i+i*i;
        }
        return tab;
    }

    void _test() {
    int size = 6;
        int ret = 0;
        point_t* tab = gen_struct(size);

        monitored.open = true;
        monitored.close = true;
        monitored.write = true;
        SANDBOX_BEGIN;
        ret = save(tab, size, "file.txt");
        SANDBOX_END;

        free(tab);
        tab = NULL;

        if (stats.open.called != 1) {
            CU_FAIL();
            push_info_msg(_("You should call open() only once."));
        }
        if (stats.write.called != 1) {
            CU_FAIL();
            push_info_msg(_("You should call write() only once."));
        }
        if (stats.close.called != 1) {
            CU_FAIL();
            push_info_msg(_("You should call close() only once."));
        }

        //Regenerate the struct in case student modified it
        tab = gen_struct(size);
        int fd = open("file.txt",O_RDONLY);
        if(fd == -1) {
            CU_FAIL(_("Error, can not initialise test file"));
            push_info_msg(_("You didn't create the file."));
            return;
        }

        point_t s;
        for(int i = 0; i < size; i++){
            if ((int)read(fd, (void *) &s, sizeof(point_t)) < 1){
                push_info_msg(_("You did not write all content of the array in the file."));
                CU_FAIL();
                return;
            }
            else if (tab[i].x != s.x || tab[i].y != s.y || tab[i].z != s.z){
                push_info_msg(_("You did not write the array of struct correctly in the file."));
                CU_FAIL();
                return;
            }
        }

        if ((int)read(fd, (void *) &s, 1) > 0) {
            CU_FAIL();
            push_info_msg(_("There's data in the file, after the end of the array."));
        }
        free(tab);
        close(fd);
        if(ret != 0){
            push_info_msg(_("You did not return 0 when everything should work."));
            CU_FAIL();
        }
    }

    void test_no_file() {
        set_test_metadata("q1", _("Test writing the struct, no file already created"), 2);
        system("rm file.txt");
        _test();
    }

    void test_with_file() {
        set_test_metadata("q1", _("Test writing the struct, with file already created"), 1);
        system("rm file.txt");
        system("echo \"FOOBARxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" > file.txt");
        _test();
    }

    void test_close() {
        set_test_metadata("q1", _("Test close()."), 1);
        int size = 6;
        point_t* tab = gen_struct(size);
        system("rm file.txt");

        monitored.close = true;
        monitored.open = true;
        SANDBOX_BEGIN;
        save(tab, size, "file.txt");
        SANDBOX_END;

        free(tab);
        tab = NULL;

        int close_ok = 0;
        if (stats.close.called != 1){
            push_info_msg(_("You did not close() the file."));
            close_ok++;
            CU_FAIL();
        }if(stats.open.last_return != stats.close.last_params.fd){
            push_info_msg(_("The close() does not close the file you opened before."));
            close_ok++;
            CU_FAIL();
        }

        //We fail the close()
        tab = gen_struct(size);
        int ret = 0;
        monitored.close = true;
        failures.close = FAIL_FIRST;
        failures.close_ret = -1;
        SANDBOX_BEGIN;
        ret = save(tab, size, "file.txt");
        SANDBOX_END;

        if(ret != -3){
            push_info_msg(_("When close() fails, your code does not return -3."));
            close_ok++;
            CU_FAIL();
        }
        if(close_ok == 0){
            set_tag("close");
        }
        free(tab);
        tab = NULL;
    }

    void test_open() {
        set_test_metadata("q1", _("Test close()."), 1);
        int size = 6;
        point_t* tab = gen_struct(size);
        int ret = 0;
        system("rm file.txt");

        monitored.open = true;
        failures.open = FAIL_FIRST;
        failures.open_ret = -1;
        SANDBOX_BEGIN;
        ret = save(tab, size, "file.txt");
        SANDBOX_END;

        free(tab);
        tab = NULL;
        int tag_open = 0;
        if(ret != -1){
            push_info_msg(_("You do not return -1 when open() fails."));
            CU_FAIL();
            tag_open++;
        }

        //Test if open() return a correct file descriptor.
        tab = gen_struct(size);
        monitored.open = true;
        SANDBOX_BEGIN;
        ret = save(tab, size, "file.txt");
        SANDBOX_END;

        if(stats.open.last_return <= 2){
            push_info_msg(_("When the open() should be fine, your code returns -1."));
            CU_FAIL();
            tag_open++;
        }
        if(tag_open == 0){
            set_tag("open");
        }
        free(tab);
        tab = NULL;
    }

    void test_write_fail() {
        set_test_metadata("q1", _("Test write() fail."), 1);
        int size = 6;
        point_t* tab = gen_struct(size);
        int ret = 0;
        system("rm file.txt");

        monitored.write = true;
        failures.write = FAIL_ALWAYS;
        failures.write_ret = -1;
        SANDBOX_BEGIN;
        ret = save(tab, size, "file.txt");
        SANDBOX_END;

        free(tab);
        tab = NULL;

        if(ret != -2){
            push_info_msg(_("You do not return -2 when write() fails."));
            set_tag("failure_handling");
            CU_FAIL();
        }
    }

    int main(int argc,char** argv){
        BAN_FUNCS(system, fopen, fread, fwrite, fclose);
        RUN(test_no_file, test_with_file, test_close, test_open, test_write_fail);
    }
accessible: true
author: Olivier Martin
context: |-
    *Estimated time: 25 minutes*

    Given an array of ``struct point`` defined below, write a C code to write the array of struct into a file. The file may already exist or not. After the execution of the function, the file should only contain the array. If the file has to be created, the user who created it must has

    .. code-block:: c

        typedef struct point {
            int x;
            int y;
            int z;
        } point_t;

    Use only ``open(2)``, ``write(2)`` and ``close(2)``. You can only call ``write(2)`` once.

    Hint : read carefully the man page of ``open(2)`` to manage all the  cases mentionned here above.
environment: cpp
evaluate: best
groups: false
limits:
    time: '30'
    output: '2'
    memory: '100'
name: '[S5] Save struct into file'
network_grading: false
order: 44
problems:
    q1:
        type: code
        name: ''
        header: |-
            .. code-block:: c

                /*
                 * @pre pt != NULL
                 *      size > 0, the length of the array.
                 *      filename != NULL
                 * @post write the array of struct in the file.
                 *       return 0 is everything occurs fine.
                 *       -1 if open() fails.
                 *       -2 if write() fails.
                 *       -3 if close() fails.
                 */
                int save(point_t *pt, int size, char *filename)
        language: c
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Open
        type: 0
        visible: true
        description: This tag validate you are able to open a file.
        id: open
    '1':
        type: 0
        visible: true
        name: Close
        description: This tag validate that your close are correctly performed.
        id: close
    '2':
        name: Failure handling
        visible: true
        description: You do not manage failures properly during write operations.
        id: failure_handling
        type: 1
    '3':
        name: Not compile
        type: 1
        visible: true
        description: You code do not compile.
        id: not_compile
    '4':
        description: ''
        type: 1
        id: memory
        name: Memory Exceeded
        visible: true
    '5':
        id: sigfpe
        name: Floating Point Exception
        type: 1
        description: ''
        visible: true
    '6':
        id: double_free
        type: 1
        description: Your code produced a double free.
        name: Double free
        visible: true
    '7':
        description: You use some banned functions.
        id: banned_funcs
        name: Banned functions
        visible: true
        type: 1
    '8':
        name: Timeout
        id: timeout
        type: 1
        description: Your code exceeds the maximum allowed time.
        visible: true
    '9':
        id: sigsegv
        description: ''
        visible: true
        type: 1
        name: Segmentation Fault
    '10':
        type: 2
        description: ''
        name: S5
        visible: true
        id: ''
    '11':
        name: File
        visible: true
        description: ''
        type: 2
        id: ''
weight: 1.0
