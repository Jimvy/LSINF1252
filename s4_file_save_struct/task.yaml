accessible: true
author: Olivier Martin
context: |-
    *Estimated time: 25 minutes*

    Given an array of ``struct point`` defined below, write a C code to write the array of struct into a file. The file may already exist or not. After the execution of the function, the file should only contain the array. If the file has to be created, the user who created it must have the permission to read it.

    .. code-block:: c

        typedef struct point {
            int x;
            int y;
            int z;
        } point_t;

    Use only ``open(2)``, ``write(2)`` and ``close(2)``. You can only call ``write(2)`` once.

    Hint : read carefully the man page of ``open(2)`` to manage all the  cases mentionned here above.
environment: cpp
evaluate: best
groups: false
limits:
    time: '30'
    output: '2'
    memory: '100'
name: '[S5] Save struct into file - REVIEWED'
network_grading: false
order: 44
problems:
    q1:
        type: code
        name: ''
        header: |-
            .. code-block:: c

                /*
                 * @pre pt != NULL, pointer to the first point_t in the array
                 *      size > 0, the length of the array.
                 *      filename != NULL
                 * @post write the array of struct in the file.
                 *       return 0 is everything occurs fine.
                 *       -1 if open() fails.
                 *       -2 if write() fails.
                 *       -3 if close() fails.
                 */
                int save(point_t *pt, int size, char *filename) {
        language: c
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Open
        type: 0
        visible: true
        description: This tag validate you are able to open a file.
        id: open
    '1':
        type: 0
        visible: true
        name: Close
        description: This tag validate that your close are correctly performed.
        id: close
    '12':
        visible: true
        id: too_many_op
        name: Too many read/write
        type: 1
        description: You call the read or write function more than necessary.
    '2':
        name: Failure handling
        visible: true
        description: You do not manage failures properly during write operations.
        id: failure_handling
        type: 1
    '3':
        name: Not compile
        type: 1
        visible: true
        description: You code do not compile.
        id: not_compile
    '4':
        description: ''
        type: 1
        id: memory
        name: Memory Exceeded
        visible: true
    '5':
        id: sigfpe
        name: Floating Point Exception
        type: 1
        description: ''
        visible: true
    '6':
        id: double_free
        type: 1
        description: Your code produced a double free.
        name: Double free
        visible: true
    '7':
        description: You use some banned functions.
        id: banned_funcs
        name: Banned functions
        visible: true
        type: 1
    '8':
        name: Timeout
        id: timeout
        type: 1
        description: Your code exceeds the maximum allowed time.
        visible: true
    '9':
        id: sigsegv
        description: ''
        visible: true
        name: Segmentation Fault
        type: 1
    '10':
        type: 2
        description: ''
        name: S5
        visible: true
        id: ''
    '11':
        name: File
        description: ''
        type: 2
        visible: true
        id: ''
weight: 1.0
