/student/tests.c: |
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    point_t* gen_struct(int size){
        point_t *tab = malloc(size*sizeof(point_t));
        if (tab == NULL)
            CU_FAIL("Can not initialize test suite");
            return (point_t*)NULL;
        for (int i = 0; i < size; i++){
            tab[i].x = i+i;
            tab[i].y = i+i+i;
            tab[i].z = i+i*i;
        }
        return tab;
    }

    /*
     * Test with open fail
     */
    void test_ok() {
        set_test_metadata("q1", _("Test write array struct"), 1);
        int size = 6;
        int ret = 0;
        point_t* tab = gen_struct(size);

        SANDBOX_BEGIN;
        ret = save(tab, size, "file.txt");
        SANDBOX_END;

        free(tab);
        tab = NULL;

        //Regenerate the struct in case student modified it
        tab = gen_struct(size);
        int fd = open("file.txt",O_RDONLY);
        if(fd == -1)
            CU_FAIL("Can not initialize test suite");

        point_t s;
        for(int i = 0; i < size; i++){
            /*int r = */read(fd, (void *) &s, sizeof(point_t));
            /*if (r == -1){
                push_info_msg(_("You did not write all content of the array in the file."));
                CU_FAIL();
            }*/
            if (tab[i].x != s.x || tab[i].y != s.y || tab[i].z != s.z){
                push_info_msg(_("You did not write the array of struct correctly in the file."));
                CU_FAIL();
            }
            //printf("%d %d %d", s.x, s.y, s.z);
        }
        //free(tab);
        close(fd);
        if(ret != 0){
            push_info_msg(_("You did not return 0 when everything occurs fine."));
            CU_FAIL();
        }
    }



    int main(int argc,char** argv){
        BAN_FUNCS(system);
        RUN(test_ok);
    }
accessible: true
author: Olivier Martin
context: |-
    Given an array of ``struct 3dpoint`` defined below, write a C code to write the array of struct into a file named ``save.txt``. You have to write all elements sequentially.

    .. code-block:: c

        typedef struct 3dpoint{
            int x;
            int y;
            int z;
        } 3dpoint_t;
environment: pyjavacpp
evaluate: best
groups: false
limits:
    output: '2'
    time: '30'
    memory: '100'
name: '[S5] Save struct into file'
network_grading: false
order: 24
problems:
    q1:
        language: ''
        type: code
        name: ''
        header: |-
            .. code-block:: c

                /*
                 * @pre pt != NULL
                 *      size >= 0, the length of the array.
                 *      filename != NULL
                 * @post write the array of struct in the file.
                 */
                int save(point_t* pt, int size, char* filename)
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Not compile
        type: 1
        visible: true
        id: not_compile
        description: You code do not compile.
    '1':
        description: ''
        id: memory
        type: 1
        name: Memory Exceeded
        visible: false
    '2':
        id: sigfpe
        name: Floating Point Exception
        description: ''
        type: 1
        visible: true
    '3':
        visible: true
        description: Your code produced a double free.
        name: Double free
        id: double_free
        type: 1
    '4':
        id: banned_funcs
        type: 1
        description: You use some banned functions.
        name: Banned functions
        visible: false
    '5':
        id: timeout
        visible: true
        description: Your code exceeds the maximum allowed time.
        type: 1
        name: Timeout
    '6':
        id: sigsegv
        type: 1
        name: Segmentation Fault
        visible: true
        description: ''
    '7':
        visible: true
        name: File
        description: ''
        type: 2
        id: ''
    '8':
        visible: true
        type: 2
        name: S5
        description: ''
        id: ''
weight: 1.0
