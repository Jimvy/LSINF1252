/student/student_code.c.tpl: |+
    #include<string.h>

    int tab_find(int tab[], int len, int elem){
    @    @q1@@
    }


/student/student_code.h: int tab_find(int tab[], int len, int elem);
/student/tests.c: |+
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    void test_myfunc_ret()
    {
        set_test_metadata("q1", _("Test the function palindrome"), 1);

        int ret1 = -2;
        int ret2 = -2;
        int ret3 = -2;
        int ret4 = -2;
        int ret5 = -2;
        int ret6 = -2;
        int ret7 = -2;

        char *str1 = trap_buffer(44, TRAP_RIGHT, PROT_WRITE, "Tityre tu patulae recubans sub tegmine fagi");
        char *str2 = trap_buffer(40, TRAP_RIGHT, PROT_WRITE, "tu l as trop ecrase cesar ce port salut");
        char *str3 = trap_buffer(1, TRAP_RIGHT, PROT_WRITE, "");
        char *str4 = trap_buffer(25, TRAP_RIGHT, PROT_WRITE, "azertyuioppptpoiuytreza");
        char *str5 = trap_buffer(22, TRAP_RIGHT, PROT_WRITE, "qsdfghjklmmlkjhgfdsq");
        char *str6 = trap_buffer(2, TRAP_RIGHT, PROT_WRITE, "e");

        SANDBOX_BEGIN;
        ret1 = pal(str1);
        ret2 = pal(str2);
        ret3 = pal(str3);
        ret4 = pal(str4);
        ret5 = pal(str5);
        ret6 = pal(NULL);
        ret7 = pal(str6);
        SANDBOX_END;
        free_trap(str1,44);
        free_trap(str2,40);
        free_trap(str3,1);
        free_trap(str4,25);
        free_trap(str5,22);
        free_trap(str6,2);
        CU_ASSERT_EQUAL(ret1,0);
        CU_ASSERT_EQUAL(ret2,1);
        CU_ASSERT_EQUAL(ret3,1);
        CU_ASSERT_EQUAL(ret4,0);
        CU_ASSERT_EQUAL(ret5,1);
        CU_ASSERT_EQUAL(ret6,-1);
        CU_ASSERT_EQUAL(ret7,1);
        if (ret1!=0 || ret4!=0)
            push_info_msg(_("Your function doesn't work for strings that are not palindromes"));
        if (ret2!=1 || ret3!=1 || ret5!=1 || ret7!=1)
            push_info_msg(_("Your function doesn't work for strings that are palindromes"));
        if (ret6!=-1)
            push_info_msg(_("Your function doesn't work for NULL strings"));
    }

    int main(int argc,char** argv)
    {
        BAN_FUNCS(syetem, set_tag);
        RUN(test_myfunc_ret);
    }

accessible: true
author: Olivier Martin
context: |-
    In C, an array is a set of variables sharing the same data type : ``int array[3] = {42, 1337, 0};``.

    An item of an array can be retrived through its index.
    For example ``array[1]`` gives the second element of the array (here ``1337``).
environment: cpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S2] Through the array'
network_grading: false
order: 10
problems:
    tab_find:
        header: |-
            Write the body of the function *tab_find* :

            .. code-block:: c

                /* tab_find

                @tab : an array of int
                @len : the number of int in tab
                @elem : the elem looked for
                @return : return the index at which elem is found, else returns -1 if not found. */
                int tab_find(int tab[], int len, int elem)
        name: Find the index
        language: c
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        id: timeout
        name: Timeout
        visible: true
        type: 1
        description: Your code exceeds the maximum allowed time.
    '1':
        id: sigsegv
        name: Segmentation Fault
        visible: true
        description: ''
        type: 1
    '2':
        id: not_compile
        type: 1
        name: Not compile
        visible: true
        description: You code does not compile.
    '3':
        id: memory
        visible: true
        type: 1
        name: Memory Exceeded
        description: ''
    '4':
        name: Floating Point Exception
        description: ''
        visible: true
        id: sigfpe
        type: 1
    '5':
        id: double_free
        visible: true
        description: Your code produced a double free.
        name: Double free
        type: 1
    '6':
        id: banned_funcs
        description: You use some banned functions.
        type: 1
        visible: true
        name: Banned functions
    '7':
        name: S2
        type: 2
        description: ''
        visible: true
        id: ''
weight: 1.0
