/student/tests.c: |+
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    int tab_find_correct(int tab[], int len, int elem){
        for(int i = 0; i < len; i++){
            if(tab[i] == elem)
                return i;
        }
        return -1;
    }

    void test(){
        set_test_metadata("tab_find", _("Test function tab find"), 1);

        const int size = 10;
        int array[10] = {1,3,5,7,9,0,8,6,4,2};
        int *tab = trap_buffer(size*sizeof(int), TRAP_RIGHT, PROT_WRITE, array);
        int ret = 0;

        for(int i = 0; i < size+10; i++){
            SANDBOX_BEGIN;
            ret = tab_find(tab, size, i);
            SANDBOX_END;

            if(ret != tab_find_correct(tab, size, i)){
                push_info_msg(_("Your function does not return the correct index."));
                CU_FAIL();
            }
        }
        free_trap(tab,size*sizeof(int));
    }

    int main(int argc,char** argv) {
        BAN_FUNCS(syetem, set_tag);
        RUN(test);
    }

accessible: true
author: Olivier Martin
context: |-
    In C, an array is a set of variables sharing the same data type : ``int array[3] = {42, 1337, 0};``.

    An item of an array can be retrived through its index.
    For example ``array[1]`` gives the second element of the array (here ``1337``).
environment: cpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S2] Through the array'
network_grading: false
order: 10
problems:
    tab_find:
        header: |-
            Write the body of the function *tab_find* :

            .. code-block:: c

                /* tab_find

                @tab : an array of int
                @len : the number of int in tab
                @elem : the elem looked for
                @return : return the index at which elem is found, else returns -1 if not found. */
                int tab_find(int tab[], int len, int elem)
        name: Find the index
        language: c
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        id: timeout
        name: Timeout
        visible: true
        type: 1
        description: Your code exceeds the maximum allowed time.
    '1':
        id: sigsegv
        description: ''
        name: Segmentation Fault
        visible: true
        type: 1
    '2':
        id: not_compile
        type: 1
        name: Not compile
        visible: true
        description: You code does not compile.
    '3':
        id: memory
        visible: true
        type: 1
        name: Memory Exceeded
        description: ''
    '4':
        name: Floating Point Exception
        description: ''
        visible: true
        id: sigfpe
        type: 1
    '5':
        id: double_free
        visible: true
        description: Your code produced a double free.
        name: Double free
        type: 1
    '6':
        id: banned_funcs
        description: You use some banned functions.
        type: 1
        visible: true
        name: Banned functions
    '7':
        name: S2
        description: ''
        type: 2
        visible: true
        id: ''
weight: 1.0
