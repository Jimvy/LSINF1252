/student/tests.c: |+
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    void test_myfunc_ret()
    {
        set_test_metadata("q1", _("Test the function palindrome"), 1);

        int ret1 = -2;
        int ret2 = -2;
        int ret3 = -2;
        int ret4 = -2;
        int ret5 = -2;
        int ret6 = -2;
        int ret7 = -2;

        char *str1 = trap_buffer(44, TRAP_RIGHT, PROT_WRITE, "Tityre tu patulae recubans sub tegmine fagi");
        char *str2 = trap_buffer(40, TRAP_RIGHT, PROT_WRITE, "tu l as trop ecrase cesar ce port salut");
        char *str3 = trap_buffer(1, TRAP_RIGHT, PROT_WRITE, "");
        char *str4 = trap_buffer(25, TRAP_RIGHT, PROT_WRITE, "azertyuioppptpoiuytreza");
        char *str5 = trap_buffer(22, TRAP_RIGHT, PROT_WRITE, "qsdfghjklmmlkjhgfdsq");
        char *str6 = trap_buffer(2, TRAP_RIGHT, PROT_WRITE, "e");

        SANDBOX_BEGIN;
        ret1 = pal(str1);
        ret2 = pal(str2);
        ret3 = pal(str3);
        ret4 = pal(str4);
        ret5 = pal(str5);
        ret6 = pal(NULL);
        ret7 = pal(str6);
        SANDBOX_END;
        free_trap(str1,44);
        free_trap(str2,40);
        free_trap(str3,1);
        free_trap(str4,25);
        free_trap(str5,22);
        free_trap(str6,2);
        CU_ASSERT_EQUAL(ret1,0);
        CU_ASSERT_EQUAL(ret2,1);
        CU_ASSERT_EQUAL(ret3,1);
        CU_ASSERT_EQUAL(ret4,0);
        CU_ASSERT_EQUAL(ret5,1);
        CU_ASSERT_EQUAL(ret6,-1);
        CU_ASSERT_EQUAL(ret7,1);
        if (ret1!=0 || ret4!=0)
            push_info_msg(_("Your function doesn't work for strings that are not palindromes"));
        if (ret2!=1 || ret3!=1 || ret5!=1 || ret7!=1)
            push_info_msg(_("Your function doesn't work for strings that are palindromes"));
        if (ret6!=-1)
            push_info_msg(_("Your function doesn't work for NULL strings"));
    }

    int main(int argc,char** argv)
    {
        BAN_FUNCS();
        RUN(test_myfunc_ret);
    }

accessible: true
author: Arthur van Stratum
context: 'Palindrome are strings of text which reads the same backward as forward,
    i.e. : "racecar", or "a man a plan a canal panama".'
environment: cpp
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[S2] Palindrome'
network_grading: false
order: 18
problems:
    q1:
        language: c
        name: ''
        type: code
        header: |-
            Write the body of the function *pal* which tells if the given string is a palindrome or not. Ignore spaces. An empty string is considered a palindrome. You have access to the functions of *string.h*

            .. code-block:: c

                #include <string.h>
                /*
                * @return: return 1 if a str is a palindrome, -1 if str is NULL, else 0.
                */
                int pal(char *str) {
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
