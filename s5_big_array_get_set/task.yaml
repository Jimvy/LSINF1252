accessible: true
author: Olivier Martin
context: |-
    *Estimated time: 30 minutes*

    Given a file containing a large array of integers, you have to write a function to edit the element at a given index the array and another function to retrieve a specific element from this array.

    Since the array is huge, you cannot load it completely in memory. Consequently, you have to naviguate directly through the array in the file by using ``lseek(2)``.

    You may want to use ``fstat(2)`` to obtain informations about a given file.

    Use only ``open(2)``, ``read(2)``, ``write(2)``, ``close(2)`` and ``lseek(2)``.
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    output: '2'
    time: '30'
    memory: '50'
name: '[S5] Get and set on array stored in binary file '
network_grading: false
order: 48
problems:
    q1:
        header: |-
            .. code-block:: c

                /*
                 * @pre filename != NULL, index >= 0
                 * @post return the integer at the index {index}
                 *       of the array in the file {filename}.
                 *       return -1 in case of error.
                 *       return -2 if index >= length of array.
                 */
                int get(char *filename, int index) {
        type: code
        name: Retrieve the element at a given index
        language: c
    q2:
        type: code
        header: |-
            .. code-block:: c

                /*
                 * @pre filename != NULL, index >= 0
                 * @post set the element in the file {filename}
                 *       at index {index} at value {value}.
                 *       do nothing in case of errors
                 */
                void set(char *filename, int index, int value) {
        language: c
        name: Change the value at a given index
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        id: close
        type: 0
        visible: true
        name: Close
        description: This tag validate that your close are correctly performed.
    '1':
        name: Open
        id: open
        visible: true
        type: 0
        description: This tag validate you are able to open a file.
    '10':
        id: double_free
        description: Your code produced a double free.
        visible: true
        type: 1
        name: Double free
    '11':
        name: Failure handling
        type: 1
        description: You do not manage failures properly.
        id: failure_handling
        visible: true
    '12':
        description: ''
        type: 1
        visible: true
        name: Floating Point Exception
        id: sigfpe
    '13':
        type: 1
        description: ''
        visible: true
        id: memory
        name: Memory Exceeded
    '14':
        type: 1
        visible: true
        name: Not compile
        description: You code do not compile.
        id: not_compile
    '15':
        name: Original file modified
        id: original_modif
        description: You have modified the original file.
        visible: true
        type: 1
    '2':
        type: 1
        visible: true
        description: The value written in the file has not the correct value.
        name: Wrong Set Value
        id: wrong_set_value
    '3':
        description: A value at an unwanted index was modified.
        visible: true
        type: 1
        id: wrong_index_set
        name: Wrong Index Set
    '4':
        name: Wrong Get Value Returned
        type: 1
        visible: true
        id: wrong_get_value_returned
        description: The get() function did not return the expected value.
    '5':
        description: Your code exceeds the maximum allowed time.
        type: 1
        id: timeout
        name: Timeout
        visible: true
    '6':
        visible: true
        id: oob
        description: You try to read outside of the array.
        name: Out of bounds
        type: 1
    '7':
        type: 1
        id: too_many_op
        name: Too many read/write
        description: You call the read or write function more than necessary.
        visible: true
    '8':
        visible: true
        type: 1
        name: Segmentation Fault
        id: sigsegv
        description: ''
    '9':
        name: Banned functions
        visible: true
        type: 1
        id: banned_funcs
        description: You use some banned functions.
    '16':
        visible: true
        type: 2
        description: ''
        name: File
        id: ''
    '17':
        name: S5
        description: ''
        type: 2
        visible: true
        id: ''
weight: 1.0
