/solution.c.sol: |-
    //q1
    int fd = open(filename, O_RDONLY);
    if(fd == -1) {
        return -1;
    }

    struct stat buf;
    fstat(fd, &buf);
    if(index > buf.st_size){
        return -2;
    }

    lseek(fd, (off_t) index*sizeof(int), SEEK_SET);
    unsigned int n2;
    int r = read(fd, (void *) &n2, sizeof(int));
    if (r == -1)
        return -1;
    close(fd);
    return n2;




    //q2
    int fd = open(filename, O_WRONLY);
    if(fd == -1) {
        return;
    }
    lseek(fd, (off_t) index*sizeof(unsigned int), SEEK_SET);
    write(fd, (void *) &value, sizeof(unsigned int));
    close(fd);
accessible: true
author: Olivier Martin
context: |-
    Given a file containing a huge array of integers, you are asked to write a function to edit a value of the array and another to retrieve a value from the array.

    Since the array is huge, you can not load it entierly into memory. Consequently, you have to naviguate directly through the array in the file by using `lseek(2) <https://sites.uclouvain.be/SystInfo/manpages/man2/lseek.2.html>`_.

    You may want to use `fstat(2) <https://linux.die.net/man/2/fstat>`_ to get informations about the file.
environment: cpp
evaluate: best
groups: false
limits:
    output: '2'
    time: '30'
    memory: '50'
name: '[S5] Get and set on array in file'
network_grading: false
order: 26
problems:
    q1:
        name: ''
        type: code
        language: ''
        header: |-
            .. code-block:: c

                /*
                 * @pre filename != NULL, index >= 0
                 * @post return the integer at the index {index}
                 *       of the array in the file {filename}.
                 *       return -1 in case of error.
                 *       return -2 if index >= length of array.
                 */
                int get(char* filename, int index)
    q2:
        type: code
        language: ''
        name: ''
        header: |-
            .. code-block:: c

                /*
                 * @pre filename != NULL, index >= 0
                 * @post set the integer present in the file {filename}
                 *       at index {index} at value {value}.
                 *       do nothing if something fails.
                 */
                void set(char* filename, int index, int value)
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        type: 0
        visible: true
        id: close
        name: Close
        description: This tag validate that your close are correctly performed.
    '1':
        name: Open
        type: 0
        visible: true
        id: open
        description: This tag validate you are able to open a file.
    '10':
        id: banned_funcs
        visible: true
        description: You use some banned functions.
        name: Banned functions
        type: 1
    '11':
        name: Double free
        type: 1
        description: Your code produced a double free.
        id: double_free
        visible: true
    '12':
        description: You do not manage failures properly.
        id: failure_handling
        name: Failure handling
        type: 1
        visible: true
    '13':
        description: ''
        name: Floating Point Exception
        visible: true
        id: sigfpe
        type: 1
    '14':
        name: Memory Exceeded
        visible: true
        id: memory
        type: 1
        description: ''
    '2':
        id: not_compile
        visible: true
        name: Not compile
        description: You code do not compile.
        type: 1
    '3':
        visible: true
        id: original_modif
        description: You have modified the original file.
        name: Original file modified
        type: 1
    '4':
        id: wrong_set_value
        name: Wrong Set Value
        visible: true
        type: 1
        description: The value written in the file has not the correct value.
    '5':
        type: 1
        name: Wrong Index Set
        id: wrong_index_set
        visible: true
        description: A value at an unwanted index was modified.
    '6':
        id: wrong_get_value_returned
        type: 1
        visible: true
        description: The get() function did not return the expected value.
        name: Wrong Get Value Returned
    '7':
        name: Timeout
        id: timeout
        visible: true
        description: Your code exceeds the maximum allowed time.
        type: 1
    '8':
        type: 1
        name: Out of bounds
        visible: true
        description: You try to read outside of the array.
        id: oob
    '9':
        name: Too many read/write
        id: too_many_op
        description: You call the read or write function more than necessary.
        type: 1
        visible: true
    '15':
        name: File
        description: ''
        visible: true
        type: 2
        id: ''
weight: 1.0
