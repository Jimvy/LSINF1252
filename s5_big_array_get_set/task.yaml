/student/tests.c: |
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    int get_value_by_index(int i){
        return (i*i*(i/2))%20000;
    }

    /*
     * Generate a file named "file.txt".
     * The content is n int following the formula defined above.
     */
    void gen_file(int n){
        int fd = open("file.txt",O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR);
        if(fd == -1) {
            CU_FAIL("Error, can not initialise test file");
        }
        int array[n];
        int i = 0;
        for (i = 0; i < n; i++){
            array[i] = get_value_by_index(i);
            if (write(fd, (void *) &array[i], sizeof(int)) == -1){
                CU_FAIL("Error, can not initialise test file");
            }
        }
        if (close(fd) == -1)
            CU_FAIL("Error, can not initialise test file");
    }

    /*
     * Test with some int in the file
     */
    void test_get() {
        set_test_metadata("q1", _("Test with normal file"), 2);
        gen_file(1000);

        for(int i = 0; i < 1000; i+=50){
            int ret = 0;

            SANDBOX_BEGIN;
            ret = get(i);
            SANDBOX_END;

            if(ret != get_value_by_index(i)){
                push_info_msg(_("You do not return the correct value."));
                CU_FAIL();
            }
        }
    }


    /*
     * Test with some int in the file
     */
    void test_set() {
        set_test_metadata("q2", _("Test with normal file"), 2);
        gen_file(1000);

        for(int i = 0; i < 1000; i+=50){
            SANDBOX_BEGIN;
            set(i, 2222+i);
            SANDBOX_END;
        }

        int fd = open("file.txt", O_RDONLY);
        if(fd == -1) {
            CU_FAIL("Error, can not initialise test file");
        }
        for(int i = 0; i < 1000; i+=50){
            lseek(fd, (off_t) i*sizeof(int), SEEK_SET);
            int res;
            read(fd, (void *) &res, sizeof(int));
            if (res != 2222+i){
                push_info_msg(_("You do not set the correct value in the file."));
                CU_FAIL();
            }
        }
        close(fd);
    }

    int close_tag = 0;
    void test_close_q1(){
        set_test_metadata("q1", _("Test close"), 1);
        monitored.close = true;
        SANDBOX_BEGIN;
        get(0);
        SANDBOX_END;
        printf("Q1:%d\n", stats.close.called);
        if (stats.close.called != 1){
            push_info_msg(_("You did not close the file."));
            CU_FAIL();
            close_tag++;
        }
    }

    void test_close_q2(){
        set_test_metadata("q2", _("Test close"), 1);
        monitored.close = true;
        SANDBOX_BEGIN;
        set(0,0);
        SANDBOX_END;
        printf("Q2:%d\n", stats.close.called);
        if (stats.close.called != 1){
            push_info_msg(_("You did not close the file."));
            CU_FAIL();
            close_tag++;
        }
        if (close_tag == 0)
            set_tag("close");
    }

    //TODO:
    //count read and write
    //check if index id bigger than the file
    //check if other index are not modified

    int main(int argc, char** argv){
        BAN_FUNCS(system, set_tag);
        RUN(test_get, test_set, test_close_q1, test_close_q2);
    }
accessible: true
author: Olivier Martin
context: |-
    Given a file containing a huge array of integers, you are asked to write a function to edit a value of the array and another to retrieve a value from the array.

    Since the array is huge, you can not load it entierly into memory. Consequently, you have to naviguate directly through the array in the file by using ``lseek()``.
environment: cpp
evaluate: best
groups: false
limits:
    memory: '50'
    time: '30'
    output: '2'
name: '[S5] Get and set on array in file'
network_grading: false
order: 24
problems:
    q1:
        type: code
        language: ''
        header: |-
            .. code-block:: c

                int get(int index)
        name: ''
    q2:
        name: ''
        type: code
        language: ''
        header: |-
            .. code-block:: c

                void set(int index, int value)
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        id: close
        description: This tag validate that your close are correctly performed.
        name: Close
        type: 0
        visible: true
    '1':
        name: Open
        type: 0
        id: open
        visible: true
        description: This tag validate you are able to open a file.
    '2':
        id: banned_funcs
        type: 1
        name: Banned functions
        description: You use some banned functions.
        visible: true
    '3':
        type: 1
        description: Your code produced a double free.
        visible: true
        name: Double free
        id: double_free
    '4':
        type: 1
        description: You do not manage failures during the copy properly.
        name: Failure handling
        id: failure_handling
        visible: true
    '5':
        type: 1
        visible: true
        id: sigfpe
        name: Floating Point Exception
        description: ''
    '6':
        description: ''
        visible: true
        id: memory
        name: Memory Exceeded
        type: 1
    '7':
        type: 1
        name: Not compile
        id: not_compile
        visible: true
        description: You code do not compile.
    '8':
        name: Timeout
        description: Your code exceeds the maximum allowed time.
        visible: true
        type: 1
        id: timeout
    '9':
        type: 2
        visible: true
        name: File
        description: ''
        id: ''
weight: 1.0
