accessible: true
author: Olivier Martin
context: |-
    Given a file containing a huge array of integers, you are asked to write a function to edit a value of the array and another to retrieve a value from the array.

    Since the array is huge, you can not load it entierly into memory. Consequently, you have to naviguate directly through the array in the file by using ``lseek()``.
environment: cpp
evaluate: best
groups: false
limits:
    output: '2'
    time: '30'
    memory: '50'
name: '[S5] Get and set on array in file'
network_grading: false
order: 26
problems:
    q1:
        type: code
        header: |-
            .. code-block:: c

                /*
                 * @pre filename != NULL, index >= 0
                 * @post return the integer at the index {index} of the array in the file {filename}
                 */
                int get(char* filename, int index)
        name: ''
        language: ''
    q2:
        language: ''
        type: code
        header: |-
            .. code-block:: c

                /*
                 * @pre filename != NULL, index >= 0
                 * @post set the integer present in the file {filename}
                 *       at index {index} at value {value}
                 */
                void set(char* filename, int index, int value)
        name: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Close
        description: This tag validate that your close are correctly performed.
        visible: true
        id: close
        type: 0
    '1':
        description: This tag validate you are able to open a file.
        name: Open
        visible: true
        type: 0
        id: open
    '2':
        id: banned_funcs
        type: 1
        visible: true
        description: You use some banned functions.
        name: Banned functions
    '3':
        name: Double free
        description: Your code produced a double free.
        visible: true
        type: 1
        id: double_free
    '4':
        description: You do not manage failures during the copy properly.
        id: failure_handling
        visible: true
        name: Failure handling
        type: 1
    '5':
        name: Floating Point Exception
        id: sigfpe
        type: 1
        description: ''
        visible: true
    '6':
        description: ''
        name: Memory Exceeded
        visible: true
        type: 1
        id: memory
    '7':
        name: Not compile
        description: You code do not compile.
        visible: true
        id: not_compile
        type: 1
    '8':
        visible: true
        id: timeout
        name: Timeout
        description: Your code exceeds the maximum allowed time.
        type: 1
    '9':
        type: 2
        visible: true
        name: File
        description: ''
        id: ''
weight: 1.0
