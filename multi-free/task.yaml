accessible: false
author: Louis Navarre
context: |-
    You are asked to implement the function ``free_all``, which will free all the memory associated with the following structure *university_t*:

    .. code-block:: c

        typedef struct university {
            char* city;
            int creation;
            person_t* rector;
        } university_t;

    The structure *person_t* is the following:

    .. code-block:: c

        typedef struct person {
            char* name;
            int salary;
            int age;
        } person_t;

    The *name* and the *city* have been allocated with *malloc*.

    *Hint:* all the data may not have been initialised correctly. Therefore, you have to handle all the cases (e.g. some pointers can be already NULL, and don't need to be freed).
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[S3] Multi-free'
network_grading: false
order: 29
problems:
    free_all:
        language: c
        default: ''
        name: Free all
        type: code
        header: |-
            Write the body of the function ``free_all``.

            .. code-block:: c

                /*
                 * Frees all the memory associated with u
                 * @pre: u != NULL
                 */
                 void free_all(university_t* u){
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        description: ''
        visible: true
        type: 2
        name: S3
        id: ''
weight: 1.0
