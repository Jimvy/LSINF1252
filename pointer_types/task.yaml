/solutions/sol.c: |
    #include <stdlib.h>
    #include <stdio.h>
    #include "student_code.h"

    int first(int* a){
        int *p = (int *)ptr;
        p = p+3;

        return *p;
    }

    char second(int* a){
        char *p = (char *)ptr;
        p = p+6;

        return *p;
    }

    int third(int* a){
        char *p = (char *)ptr;
        p = p+45;

        return *(int *)p;
    }
/student/student_code.c.tpl: |
    #include<stdio.h>
    #include<stdlib.h>
    #include "student_code.h"

    int first(void *ptr){
        @@first@@
    }

    char second(void *ptr){
        @@second@@
    }

    int third(void *ptr){
        @@third@@
    }
/student/tests.c: |
    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    void test_tab1() {
        set_test_metadata("first", _("test for the first input"), 1);

        int tab1[4] = {2, 3 ,5, 9};
        int tab2[4] = {1, 4, 4, 10};
        int tab3[4] = {10, 4, 21, 3};
        int tab4[4] = {10, 456789087, 2121212122, 1672386787};
        int ret = 0;

        SANDBOX_BEGIN;
        ret = first((void *) tab1);
        SANDBOX_END;
        CU_ASSERT_EQUAL(ret,9);

        SANDBOX_BEGIN;
        ret = first((void *) tab2);
        SANDBOX_END;
        CU_ASSERT_EQUAL(ret,10);

        SANDBOX_BEGIN;
        ret = first((void *) tab3);
        SANDBOX_END;
        CU_ASSERT_EQUAL(ret,3);

        SANDBOX_BEGIN;
        ret = first((void *) tab4);
        SANDBOX_END;
        CU_ASSERT_EQUAL(ret,1672386787);
    }

    void test_tab2() {
        set_test_metadata("second", _("test for the second input"), 1);

        char tab1[7] = {2, 3, 5, 9, 21, 1, 3};
        char tab2[7] = {1, 4, 4, 10, 0, 0, 0};
        char tab3[7] = {10, 4, -21, 3, -41, 20, -120};

        char ret = 0;

        SANDBOX_BEGIN;
        ret = second((void *)tab1);
        SANDBOX_END;
        CU_ASSERT_EQUAL(ret,3);

        SANDBOX_BEGIN;
        ret = second((void *)tab2);
        SANDBOX_END;
        CU_ASSERT_EQUAL(ret,0);

        SANDBOX_BEGIN;
        ret = second((void *)tab3);
        SANDBOX_END;
        CU_ASSERT_EQUAL(ret,-120);
    }

    void test_tab3() {
        set_test_metadata("third", _("test for the third input"), 1);

        int tab1[4] = {2, 3 , 5, 9};
        int tab2[4] = {1, 4, 4, 10};
        int tab3[4] = {10, 0, 21, 3};
        int tab4[4] = {10, 456789087, 2121212122, 1672386787};
        int * a = (void *)tab1;

        int ret = -1;
        char *ptr;

        *ptr = (char *)tab1;
        ptr -= 41;
        SANDBOX_BEGIN;
        ret = third((void *)ptr);
        SANDBOX_END;
        CU_ASSERT_EQUAL(ret,tab1[1]);


        *ptr = (char *)tab2;
        ptr -= 41;
        SANDBOX_BEGIN;
        ret = third((void *)ptr);
        SANDBOX_END;
        CU_ASSERT_EQUAL(ret,tab2[1]);

        *ptr = (char *)tab3;
        ptr -= 41;
        SANDBOX_BEGIN;
        ret = third((void *)ptr);
        SANDBOX_END;
        CU_ASSERT_EQUAL(ret,tab3[1]);

        *ptr = (char *)tab4;
        ptr -= 41;
        SANDBOX_BEGIN;
        ret = third((void *)ptr);
        SANDBOX_END;
        CU_ASSERT_EQUAL(ret,tab4[1]);
    }

    int main(int argc,char** argv)
    {
        BAN_FUNCS();
        RUN(test_tab1,test_tab2,test_tab3);
    }
accessible: true
author: Maxime Mawait
context: |-
    A hacker wanted to challenge you and encrypted your hard drive. To unlock your drive, he gave you a function ``get_key(int a, char b, int c)`` which returns the decryption key if the correct parameters are given.

    He then hid the parameters *a*, *b* and *c* in memory, and gave you a pointer from which you can retrieve these parameters.
environment: pyjavacpp
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[S3] Pointer types'
network_grading: false
order: 19
problems:
    first:
        header: |-
            You found a hint from the hacker, telling the first parameter is  located at the 12th byte after *ptr*. An int is guaranteed to be 4 bytes long.

            Write the body of the function *first* which returns the integer at that position in memory.

            .. code-block:: c

                int first(void *ptr) {
        language: c
        name: First argument
        type: code
    second:
        name: Second argument
        header: |-
            The second parameter is a char located 6 bytes after *ptr*.

            Write the body of the function *second* which returns the char at that position in memory.

            .. code-block:: c

                char second(void *ptr) {
        language: c
        type: code
    third:
        language: c
        type: code
        name: Third argument
        header: |-
            The third parameter is an int located 45 bytes after *ptr*.

            Write the body of the function *third* which returns the int at that position in memory.

            .. code-block:: c

                int third(void *ptr) {
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        description: Task about pointers and their use
        name: Pointer
        type: 2
        visible: true
        id: ''
weight: 1.0
