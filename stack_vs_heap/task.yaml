/student/student_code.c: |
    #include "student_code.h"


    void version1(int a, int b){
      result = a + b;
    }

    void version2(int *a, int *b, int *r){
      *r =  *a + *b;
    }
/student/student_code.c.tpl: |
    #include<stdio.h>
    #include<stdlib.h>

    #include "student_code.h"

    void version1(int a, int b){
      @@version1@@
    }

    void version2(int *a, int *b, int *r){
      @@version2@@
    }
/student/student_code.h: |
    int result, a;

    int retour1(void);

    void version1(int a, int b);

    void version2(int *a, int *b, int *r);
/student/tests.c: |
    // CTester template

    #include <stdlib.h>
    #include <stdio.h>
    #include "student_code.h"
    #include "CTester/CTester.h"


    void test_sum2(){
      set_test_metadata("version1", _("Check the `result` value"), 1);

      SANDBOX_BEGIN;
      version1(3, 7);
      SANDBOX_END;

      CU_ASSERT_EQUAL(result, 10);
      if (result != 10){
        char msg[80];
        sprintf(msg, _("Expected value: 10. Received value: %i"), result);
        push_info_msg(msg);
      }
    }


    void test_sum3(){
      set_test_metadata("version2", _("Check the value of @r"), 1);

      int a = 1, b = 8, r;

      SANDBOX_BEGIN;
      version2(&a, &b, &r);
      SANDBOX_END;

      CU_ASSERT_EQUAL(r, 9);
      if (r != 9){
        char msg[80];
        sprintf(msg, _("Expected value: 9. Received value: %i"), result);
        push_info_msg(msg);
      }
    }


    int main(int argc,char** argv)
    {
        BAN_FUNCS();
        RUN(test_sum2, test_sum3);
    }
accessible: true
author: Nicolas Rybowski, Mathieu Xhonneux
context: |-
    In a C program, variables are stored across different regions in memory, depending on where the variables have been initialized. Each memory region has different properties about how the variables can be accessed, modified, ... This exercise will show you how global variables, and variables on the stack, are managed.

    .. code-block:: c

        int result;

        void sum1(a1, b1) {
            a1 = a1 + b1;
        }

        void main(int argc, char **argv) {
            int a1 = 5, b1 = 6;

            sum1(a1, b1);
            printf("sum1: %d\n", a1);

            int a2 = 3, b2 = 7;
            sum2(a2, b2)
            printf("sum2: %d\n", result);

            int a3 = 1, b3 = 8;
            sum3(&a3, &b3);
            printf("sum3: %d\n", a3);
        }
environment: pyjavacpp
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[S3] Global''n''stack'
network_grading: false
order: 8
problems:
    return1:
        header: |-
            Variables which are declared inside functions are put on the program's stack. These variables are only accessible by the function in which they are declared.

            Moreover, passing arguments to functions, and returning values from a function, also use the stack, and use the mechanism of passing by value (see http://courses.washington.edu/css342/zander/css332/passby.html for more details). Once a variable is passed by value, a copy of it is made on the stack.

            Consider the ``main`` function here above. Knowing this, what number would the first call to ``printf`` print ?
        answer: '5'
        name: On the stack
        type: match
    version1:
        type: code
        header: |
            From what you have learned in the first question, write the body of the function *sum2* which uses the global variable *result*. Why does it work with a global variable ?

            .. code-block:: c

                void sum2(int a, int b) {
        language: c
        name: Globalizing
    version2:
        name: Passing by reference
        type: code
        language: c
        header: |
            You are now asked to return the result of the sum, not by using the *return* keyword, nor by using a global variable, but using the mechanism of passing by reference (see again http://courses.washington.edu/css342/zander/css332/passby.html).
            You can use the @r arg for this.
            What is the link between passing by reference and pointers ?

            .. code-block:: c

                /* sum3: updates the value pointed by a, to the sum of the values pointed by a and b */
                void sum3 (int *a, int *b, int *r) {
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Memory Exceeded
        type: 1
        id: memory
        description: ''
        visible: false
weight: 1.0
