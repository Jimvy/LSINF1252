accessible: true
author: Nicolas Rybowski, Mathieu Xhonneux
context: |-
    In a C program, variables are stored across different regions in memory, depending on where the variables have been initialized. Each memory region has different properties about how the variables can be accessed, modified, ... This exercise will show you how global variables, and variables on the stack, are managed.

    .. code-block:: c

        int result;

        void sum1(a1, b1) {
            a1 = a1 + b1;
        }

        void main(int argc, char **argv) {
            int a1 = 5, b1 = 6;

            sum1(a1, b1);
            printf("sum1: %d\n", a1);

            int a2 = 3, b2 = 7;
            sum2(a2, b2)
            printf("sum2: %d\n", result);

            int a3 = 1, b3 = 8;
            sum3(&a3, &b3);
            printf("sum3: %d\n", a3);
        }
environment: cpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S3] Global''n''stack - REVIEWED'
network_grading: false
order: 24
problems:
    return1:
        type: match
        header: |-
            Variables which are declared inside functions are put on the program's stack. These variables are only accessible by the function in which they are declared.

            Moreover, passing arguments to functions, and returning values from a function, also use the stack, and use the mechanism of passing by value (see http://courses.washington.edu/css342/zander/css332/passby.html for more details). Once a variable is passed by value, a copy of it is made on the stack.

            Consider the ``main`` function here above. Knowing this, what number would the first call to ``printf`` print ?
        name: On the stack
        answer: '5'
    version1:
        name: Globalizing
        header: |
            From what you have learned in the first question, write the body of the function *sum2* which uses the global variable *result*. Why does it work with a global variable ?

            .. code-block:: c

                void sum2(int a, int b) {
        type: code
        language: c
    version2:
        header: |
            You are now asked to return the result of the sum, not by using the *return* keyword, nor by using a global variable, but using the mechanism of passing by reference (see again http://courses.washington.edu/css342/zander/css332/passby.html).
            You can use the @r arg for this.
            What is the link between passing by reference and pointers ?

            .. code-block:: c

                /* sum3: updates the value pointed by r, to the sum of the values pointed by a and b */
                void sum3 (int *a, int *b, int *r) {
        type: code
        name: Passing by reference
        language: c
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        id: memory
        name: Memory Exceeded
        type: 1
        description: ''
        visible: true
    '1':
        id: timeout
        description: Your code exceeds the maximum allowed time.
        name: Timeout
        visible: true
        type: 1
    '2':
        id: sigsegv
        type: 1
        name: Segmentation Fault
        visible: true
        description: ''
    '3':
        description: You code does not compile.
        id: not_compile
        type: 1
        name: Not compile
        visible: true
    '4':
        name: Floating Point Exception
        description: ''
        visible: true
        id: sigfpe
        type: 1
    '5':
        id: double_free
        visible: true
        description: Your code produced a double free.
        name: Double free
        type: 1
    '6':
        id: banned_funcs
        name: Banned functions
        description: You use some banned functions.
        type: 1
        visible: true
    '7':
        name: S3
        visible: true
        description: ''
        type: 2
        id: ''
    '8':
        name: Pointer
        description: Task about pointers and their use
        type: 2
        visible: true
        id: ''
weight: 1.0
