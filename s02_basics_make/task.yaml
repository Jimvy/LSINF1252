accessible: true
author: Pablo Gonzalez Alvarez
context: |-
    *Estimated time: 10 minutes*

    `make` is a task runner for targets described in a `Makefile`. It is mostly used to control the compilation of an executable from source code, although it can be used to automate the compilation of a report made with LaTeX.

    `make` a new beginning
    ----------------------

    To give you a first taste, open up a *terminal* and type the following command: ``make``.

    ``make`` will great you with the following message:

        make: \*** No targets specified and no makefile found.  Stop.


    So what happened? ``make`` first start to search in your *current directory* for a file called ``Makefile``. This file contains *instructions*, aka *rules*, that tell ``make`` what to do.  Since there are no such file, `make` stops almost instantly.

    ``make`` it simple
    ------------------

    Now write a simple hello world program, which you will save into a file called `hello.c`. This programs will print the following on the standard output:

            Hello make

    *Little side note:*
        If needed, you can find at the end of this page all the source codes used in this tutorial, though I strongly recommend you write your own code. You can thus check what you have done.

    Now, fire up your terminal, go to the directory which contains ``hello.c`` and type: ``make hello``

    Now the *terminal* comes alive and tells you something like:

        cc     hello.c   -o hello

    Wow! What happened? When you typed ``make hello``, ``hello`` is what is called a *target*. A *target* is usually the name of a file that is generated by a program; examples of targets are executable or object files. (src: man page).

    Basically, ``make`` will search for a file named ``hello`` and detect from that file what programming language it uses. For most languages, ``make`` has some basic builtin *recipes* to compile it. Here the *recipe* is given in the above output.

    In that output, ``cc`` stands for *C Compiler*, ``hello.c`` the C program to be compiled, and ``-o hello`` the name of the output (an *executable* called `hello`). ``-o`` is an option of the C compiler

    Now if you type ``ls`` in your command line, you will see that a file ``hello`` appeared. This is the *executable* built by ``make`` from ``hello.c``. Now you can execute it and verify it is the correct output.

    If you type again ``make hello`` in your command line, it will tell you:

        make: 'hello' is up to date.

    That is because ``make`` only builds the files that are changed. If ``hello`` is more recent than its source file ``hello.c``, ``make`` will skip the compilation process.

    To see this, modify ``hello.c`` to write the following on the standard output:

            Hello, make!

    Now, run ``make hello`` again. Since ``hello.c`` is more recent than ``hello``, ``make`` will compile the source file again.


    This tasks will help you get a first taste of Makefiles. For more details, please refer to the following pages:

    * https://sites.uclouvain.be/SystInfo/notes/Outils/html/make.html
    * https://www.gnu.org/software/make/manual/

    The You have the following folder structure:

    .. code-block:: console

        /
            make_me.c
            make_me.h

    To try the following questions locally, you can download a zip file of the above given folder `here <https://inginious.info.ucl.ac.be/course/LSINF1252-2018/s02_basics_make/make_me.zip>`_.
environment: pyjavacpp
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[S02] Makefile basics - exercises'
network_grading: false
order: 16
problems:
    make_me_easy:
        type: match
        answer: make make_me
        name: Make me easy
        header: |-
            You want to build an executable ``make_me`` from the above source thanks to ``make``. What do you type in the terminal to do that?

            **Hint:** you do not need to write a *Makefile*.
    make_me_less_easy:
        name: Make me less easy
        header: Suppose you cannot use what you did in the above question. Write a
            Makefile that compiles the above given code and builds an executable ``make_me``.
        type: code
        language: Makefile
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: make & Makefile
        id: make
        type: 0
        description: Tasks related to the make task runner for targets described in
            Makefile.
        visible: false
weight: 1.0
