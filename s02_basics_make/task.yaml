/run: |
    #!/bin/python3

    # Script d'interface entre INGInious et des tests unitaires écrits à l'aide de CUnit
    # Auteurs : Pablo Gonzalez Alvarez
    # Licence : GPLv3

    import subprocess, shlex, os
    from inginious import feedback, rst, input

    # Student final score
    score = 0

    # MATCH

    match = input.get_input("make_me_easy")
    if match != 'make make_me':
        feedback.set_problem_result("failed", "make_me_easy")
        feedback.set_problem_feedback("You didn't make it!", "make_me_easy")
    else:
        score += 25
        feedback.set_problem_result("success", "make_me_easy")
        feedback.set_problem_feedback("You made it!", "make_me_easy")

    # CODE

    # Switch working directory to student/
    os.chdir("student")

    # Fetch and save the student code into a file for compilation
    input.parse_template("Makefile.tpl", "Makefile")

    # Compilation
    p = subprocess.Popen(shlex.split("make"), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
    make_output = p.communicate()[0].decode('utf-8')
    # If compilation failed, exit with "failed" result
    if p.returncode:
        feedback.set_problem_feedback("The compilation of your code failed. The ``make`` commands output is :", "make_me_less_easy")
        feedback.set_problem_feedback(rst.get_codeblock('', make_output), True, "make_me_less_easy")
    else:
        score += 75
        feedback.set_problem_result("success", "make_me_less_easy")
        feedback.set_problem_feedback("- Your code compiles.\n", "make_me_less_easy")


    # Remove source files
    subprocess.run("rm -rf *.c *.tpl *.h *.o", shell=True)

    feedback.set_grade(score)
    feedback.set_global_result("success" if score >= 80 else "failed")
    feedback.set_global_feedback("Good job" if score >= 80 else "Fail")
accessible: true
author: Pablo Gonzalez Alvarez
context: |-
    *Estimated time: 5 minutes*

    This tasks will help you get a first taste of Makefiles. For more details, please refer to the following pages:

    * https://sites.uclouvain.be/SystInfo/notes/Outils/html/make.html
    * https://www.gnu.org/software/make/manual/

    You have the following folder structure:

    .. code-block:: console

        /
            make_me.c
            make_me.h

    To try the following questions locally, you can download a zip file of the above given folder `here <https://inginious.info.ucl.ac.be/course/LSINF1252-2018/s02_basics_make/make_me.zip>`_.
environment: pyjavacpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S02] Makefile basics - exercises'
network_grading: false
order: 10
problems:
    make_me_easy:
        name: Make me easy
        header: |-
            You want to build an executable ``make_me`` from the above source thanks to ``make``. What do you type in the terminal to do that?

            **Hint:** you do not need to write a *Makefile*.
        answer: make make_me
        type: match
    make_me_less_easy:
        header: Suppose you cannot use what you did in the above question. Write a
            Makefile that compiles the above given code and builds an executable ``make_me``.
        language: Makefile
        name: Make me less easy
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        id: make
        name: make & Makefile
        type: 0
        description: Tasks related to the make task runner for targets described in
            Makefile.
        visible: false
weight: 1.0
