/student/Makefile: |+
    CC=gcc
    EXEC=tests
    LDFLAGS=-lcunit -lm -lpthread -ldl -rdynamic
    SRC=$(wildcard *.c) CTester/wrap_mutex.c CTester/wrap_malloc.c CTester/wrap_file.c CTester/CTester.c CTester/trap.c
    OBJ=$(SRC:.c=.o)
    CFLAGS=-Wall -Werror -DC99 -std=gnu99 -ICTester
    WRAP=-Wl,-wrap=pthread_mutex_lock -Wl,-wrap=pthread_mutex_unlock -Wl,-wrap=pthread_mutex_trylock -Wl,-wrap=pthread_mutex_init -Wl,-wrap=pthread_mutex_destroy -Wl,-wrap=malloc -Wl,-wrap=free -Wl,-wrap=realloc -Wl,-wrap=calloc -Wl,-wrap=open -Wl,-wrap=creat -Wl,-wrap=close -Wl,-wrap=read -Wl,-wrap=write -Wl,-wrap=stat -Wl,-wrap=fstat -Wl,-wrap=lseek -Wl,-wrap=exit

    all: $(EXEC)

    %.o: %.c
        $(CC) $(CFLAGS) -c -o $@ $<

    $(EXEC): $(OBJ)
        $(CC) $(WRAP) -o $@ $(OBJ) $(LDFLAGS)

    create-po:
        mkdir -p po/fr/
        xgettext --keyword=_ --language=C --add-comments --sort-output --from-code=UTF-8 -o po/tests.pot $(SRC)
        msginit --input=po/tests.pot --locale=fr_BE.utf8 --output=po/fr/tests.po

    update-po:
        xgettext --keyword=_ --language=C --add-comments --sort-output --from-code=UTF-8 -o po/tests.pot $(SRC)
        msgmerge --update po/fr/tests.po po/tests.pot

    compile-mo:
        msgfmt --no-hash --output-file=po/fr/tests.mo po/fr/tests.po
        mkdir -p fr/LC_MESSAGES/
        cp po/fr/tests.mo fr/LC_MESSAGES/tests.mo

    clean:
        rm -f $(EXEC) $(OBJ)

    .PHONY: tests

accessible: true
author: Pablo Gonzalez Alvarez
context: |-
    *Estimated time: 1-3 minutes*

    This tasks will help you get a first taste of Makefiles. For more details, please refer to the following pages:

    * https://sites.uclouvain.be/SystInfo/notes/Outils/html/make.html
    * https://www.gnu.org/software/make/manual/

    You have the following folder structure:

    .. code-block:: console

        /
            make_me.c
            make_me.h

    To try the following questions locally, you can download a zip file of the above given folder `here <https://inginious.info.ucl.ac.be/course/LSINF1252-2018/s02_basics_make/make_me.zip>`_.
environment: pyjavacpp
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[S02] Makefile basics'
network_grading: false
order: 2
problems:
    make_me_easy:
        name: Make me easy
        type: match
        answer: make make_me
        header: |-
            You want to build an executable ``make_me`` from the above source thanks to ``make``. What do you type in the terminal to do that?

            **Hint:** you do not need to write a *Makefile*.
    make_me_less_easy:
        allowed_exts:
        - .zip
        header: |-
            Suppose you cannot use what you did in the above question. Write a Makefile that compiles the above given code and builds an executable ``make_me``.

            Upload your file here. Do not modify ``make_me.c`` and ``make_me.h``.
        type: file
        name: Make me less easy
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
