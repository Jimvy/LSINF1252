accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: |-
    You must implement the ``enqueue`` and ``dequeue`` functions of a `Queue` that is implemented as a simple circular list. This
    ` Wikipedia page <https://en.wikipedia.org/wiki/Linked_list#Circularly_linked_vs._linearly_linked>`_ describes such a list as follows:

    "With a circular list, a pointer to the last node gives easy access also to the first node, by following one link. Thus, in applications that require access to both ends of the list (e.g., in the implementation of a queue), a circular structure allows one to handle the structure by a single pointer, instead of two."


    .. image:: https://upload.wikimedia.org/wikipedia/commons/d/df/Circularly-linked-list.svg

    Assume that the head of the queue is the leftmost node and that the tail of the queue is the rightmost node. In the previous example, the head and the tail are respectively ``12`` and ``37``. So in this case, the only pointer you can use will point to the ``37`` node.

    You can use the following datastructures for this exercise:

    .. code-block:: c

        typedef struct node{
          struct node* next;
          int value;
        } node_t;

        typedef struct queue{
          struct node* tail;
          int size;
        } queue_t  ;
environment: cpp
evaluate: best
groups: false
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[S4] Advanced queue'
network_grading: false
order: 44
problems:
    enqueue:
        name: Enqueue
        header: |-
            .. code:: c

                /*
                * Add @val value at the head of the @q queue
                *
                * @val     : the value to enqueue
                * @q     : the queue
                *
                * @return 0 if no error, -1 otherwise
                *
                * pre : The queue q will always be valid, you don't need to handle the NULL case.
                */
                int enqueue(queue_t* q, int val){
        type: code
        language: c
    dequeue:
        name: Dequeue
        header: |-
            *HINT* : Do not forget to free all the unused memory.

            .. code:: c

                /*
                * Remove the node at the tail of the @q queue and return the value of this node
                * @q         : the queue
                * @return     : the value at the tail
                *
                * pre         : The given queue will always be valid, you do not need to handle the NULL case.
                */
                int dequeue(queue_t* q){
        type: code
        language: c
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        type: 1
        name: Timeout
        id: timeout
        visible: true
        description: Your code exceeds the maximum allowed time.
    '1':
        type: 1
        visible: true
        description: ''
        id: sigsegv
        name: Segmentation Fault
    '2':
        type: 1
        name: Not compile
        id: not_compile
        visible: true
        description: You code does not compile.
    '3':
        visible: true
        description: ''
        name: Memory Exceeded
        type: 1
        id: memory
    '4':
        id: sigfpe
        visible: true
        description: ''
        type: 1
        name: Floating Point Exception
    '5':
        type: 1
        visible: true
        name: Double free
        id: double_free
        description: Your code produced a double free.
    '6':
        visible: true
        type: 1
        id: banned_funcs
        name: Banned functions
        description: You use some banned functions.
    '7':
        name: Data structures
        type: 2
        description: Task dealing with data structures and linked list
        visible: true
        id: ''
    '8':
        name: S4
        description: ''
        type: 2
        visible: true
        id: ''
weight: 1.0
