/student/tests.c: |
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    /*
     * Generate a file named "file.txt".
     * The content is the bytes in range [0, n[
     */
    void gen_file(int n){
        system("rm newfile.txt");
        int fd = open("file.txt",O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR);
        if(fd == -1) {
            CU_FAIL("Error, can not initialise test file");
        }
        char array[n];
        int i = 0;
        for (i = 0; i < n; i++){
            array[i] = i;
            if (write(fd, (void *) &array[i], sizeof(char)) == -1){
                CU_FAIL("Error, can not initialise test file");
            }
        }
        if (close(fd) == -1)
            CU_FAIL("Error, can not initialise test file");
    }

    /*
     * Test with open fail
     */
    void test_fail_open() {
        set_test_metadata("q1", _("Test when open() fails"), 1);
        int ret = 0;

        monitored.open = true;
        failures.open = FAIL_TWICE;
        failures.open_ret = -1;

        SANDBOX_BEGIN;
        ret = myfunc("file_that_does_not_exists.txt", "newfile_that_should_not_be_create.txt");
        SANDBOX_END;

        if (ret != -1){
            push_info_msg(_("When the open() function fails, your code does not return -1."));
            CU_FAIL();
        }else{
            set_tag("open");
        }
    }


    /*
     * Test with an empty file
     */
    void test_empty_file() {
        set_test_metadata("q1", _("Test with empty file"), 1);
        gen_file(0);
        int ret = 0;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        system("chmod 644 newfile.txt"); //If student does not set permission correctly, we set it to avoid test error
        if (system("diff file.txt newfile.txt") != 0){
            push_info_msg(_("You copy is not identical."));
            CU_FAIL();
        }
        if (ret != 0){
            push_info_msg(_("When the file is empty, your copy is not identical."));
            CU_FAIL();
        }
    }


    /*
     * Test permission
     */
    void test_file_permission() {
        set_test_metadata("q1", _("Test if permissions are equal"), 1);
        gen_file(122);

        SANDBOX_BEGIN;
        myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        system("ls -al file.txt | head -c 10 > PERM_A.txt");
        system("ls -al newfile.txt | head -c 10 > PERM_B.txt");
        if (system("diff PERM_A.txt PERM_B.txt") != 0){
            push_info_msg(_("The permission of the two files are not equals."));
            CU_FAIL();
        }else{
            set_tag("permission");
        }
    }



    /*
     * Test with some bytes in the file
     */
    void test_file() {
        set_test_metadata("q1", _("Test with non-empty file"), 2);
        gen_file(122);
        int ret = 0;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        system("chmod 644 newfile.txt"); //If student does not set permission correctly, we set it to avoid test error
        // S_IRUSR|S_IWUSR = 644
        if (system("diff file.txt newfile.txt") != 0){
            push_info_msg(_("You copy is not identical."));
            CU_FAIL();
        }else{
            set_tag("copy");
        }
        if (ret != 0){
            push_info_msg(_("You do not return 0 when the copy should be successful."));
            CU_FAIL();
        }
    }

    /*
     * Test with some bytes in the file
     */
    void test_file_write_fail() {
        set_test_metadata("q1", _("Test with normal file (with some syscall failures)"), 1);
        gen_file(125);
        int ret = 0;

        monitored.write = true;
        failures.write = FAIL_THIRD;
        failures.write_ret = -1;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        if (ret != -1){
            push_info_msg(_("You do not return -1 when a fail occurs with read() or write()"));
            set_tag("failure_handling");
            CU_FAIL();
        }
    }

    void test_stat_fail() {
        set_test_metadata("q1", _("Test return value when stat() fails"), 1);
        gen_file(125);
        int ret = 0;

        monitored.stat = true;
        failures.stat = FAIL_ALWAYS;
        failures.stat_ret = -1;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        if (ret != -1){
            push_info_msg(_("You do not return -1 when a fail occurs with stat()"));
            set_tag("failure_handling");
            CU_FAIL();
        }
    }

    /*
     * Test with some bytes in the file with close()
     */
    void test_close() {
        set_test_metadata("q1", _("Test close()."), 1);
        gen_file(2);

        monitored.close = true;
        monitored.open = true;
        SANDBOX_BEGIN;
        myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        int close_tag = 0;
        if (stats.close.called != 2){
            push_info_msg(_("You did not close() the two files."));
            close_tag++;
            CU_FAIL();
        }

        //We fail a close()
        gen_file(3);
        int ret = 0;
        monitored.close = true;
        failures.close = FAIL_TWICE;
        failures.close_ret = -1;
        SANDBOX_BEGIN;
        ret = myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        if(ret != -1){
            push_info_msg(_("When close() fails, your code does not return -1."));
            close_tag++;
            CU_FAIL();
        }
        if(close_tag == 0){
            set_tag("close");
        }
    }


    /*
     * Test original file not modified (content and permissions)
     */
    void test_original_integrity() {
        set_test_metadata("q1", _("Test original file not modified"), 1);
        gen_file(70);
        system("cp file.txt file_original.txt");
        system("ls -al file.txt | head -c 10 > PERM_FILE_1.txt");

        SANDBOX_BEGIN;
        myfunc("file.txt", "newfile.txt");
        SANDBOX_END;

        if (system("diff file.txt file_original.txt") != 0){
            push_info_msg(_("You can not modify the original file"));
            CU_FAIL();
            set_tag("original_modif");
        }
        system("ls -al file.txt | head -c 10 > PERM_FILE_2.txt");
        if (system("diff PERM_FILE_1.txt PERM_FILE_2.txt") != 0){
            push_info_msg(_("You can not modify the permissions of the original file."));
            CU_FAIL();
            set_tag("original_modif");
        }
    }

    int main(int argc,char** argv){
        BAN_FUNCS(system, set_tag, fopen, fread, fwrite, fclose, fstat);
        RUN(test_fail_open, test_empty_file, test_file_permission, test_file, test_file_write_fail, test_stat_fail, test_original_integrity, test_close);
    }
accessible: true
author: Olivier Martin
context: |-
    *Estimated time: 30 minutes*

    Given a file containing arbitrary bytes, you are asked to define a function that copy the file. You can not modify the content of the original file. Beware, the copied file should have the same permissions as the original file.

    Use only ``open(2)``, ``read(2)``, ``write(2)``, ``stat(2)`` and ``close(2)``.
environment: cpp
evaluate: best
groups: false
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S5] File copy - REVIEWED'
network_grading: false
order: 50
problems:
    q1:
        language: c
        name: ''
        type: code
        header: |-
            Write here the body of the function

            .. code-block:: c

                /*
                 * @pre file_name != NULL, name of the original file
                 *      new_file_name != NULL, name of the new file (the copy)
                 *
                 * @post copy the content of {file_name} to {new_file_name}.
                 *       return 0 if the function terminates with success. -1 in case of errors.
                 */
                int copy(char *file_name, char *new_file_name) {
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Close
        type: 0
        id: close
        visible: true
        description: This tag validate that your close are correctly performed.
    '1':
        id: permission
        description: This tag validate that you are able to copy permission of a file.
        name: Permission
        visible: true
        type: 0
    '2':
        type: 0
        description: This tag validate you are able to copy a file.
        id: copy
        name: Copy
        visible: true
    '3':
        description: This tag validate you are able to open a file.
        name: Open
        id: open
        visible: true
        type: 0
    '10':
        id: sigfpe
        type: 1
        visible: true
        description: ''
        name: Floating Point Exception
    '11':
        type: 1
        visible: true
        id: sigsegv
        name: Segmentation Fault
        description: ''
    '12':
        name: Banned functions
        id: banned_funcs
        visible: true
        type: 1
        description: You use some banned functions.
    '4':
        description: ''
        visible: true
        type: 1
        id: memory
        name: Memory Exceeded
    '5':
        visible: true
        description: You code does not compile.
        id: not_compile
        name: Not compile
        type: 1
    '6':
        id: double_free
        type: 1
        description: Your code produced a double free.
        visible: true
        name: Double free
    '7':
        id: timeout
        name: Timeout
        visible: true
        type: 1
        description: Your code exceeds the maximum allowed time.
    '8':
        id: original_modif
        type: 1
        name: Original file modified
        description: You have modified the original file.
        visible: true
    '9':
        id: failure_handling
        description: You do not manage failures during the copy properly.
        type: 1
        visible: true
        name: Failure handling
    '13':
        type: 2
        name: File
        description: ''
        visible: true
        id: ''
    '14':
        type: 2
        name: S5
        visible: true
        description: ''
        id: ''
weight: 1.0
