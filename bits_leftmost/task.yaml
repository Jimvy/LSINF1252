accessible: true
author: Arthur van Stratum
context: |-
    In this exercise, we will work with operation on bits. When we speak about the position of a bit, index 0 corresponds to lowest order bit, 1 to the second-lowest order bit, ...

    In C source code, you can write a number in binary (base 2) by prefixing it via 0b., e.g. 0b11010 = 26.

    This exercise will introduce some non-standard data types which guarantee that the variable has a fixed number of bits. Indeed, on some machines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to perform bitwise operations, we have to know first on how many bits we are working.

    For this, C introduces a new class of variable types :

    - *int8_t* (signed integer of 8 bits)
    - *uint8_t* (unsigned integer of 8 bits)
    - *uint16_t* (unsigned integer of 16 bits)

    You can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These types are defined in <stdint.h>
environment: cpp
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[S2] Bitwise operation: high order bits '
network_grading: false
order: 14
problems:
    q1:
        header: |-
            Write the body of a function *get_3_leftmost_bits* that returns the 3 high order bits of *x*.

            For instance, if *x=0b11011001...*, the function should return a *uint8_t* containing ``0b00000110``.

            If *x=0b01100001...*, the function should return a *uint8_t* containing ``0b00000011``.

            .. code-block:: c

                #include <stdint.h>
                uint8_t get_3_leftmost_bits(uint32_t x) {
        name: ''
        type: code
        language: c
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        description: Your code exceeds the maximum allowed time.
        name: Timeout
        visible: true
        type: 1
        id: timeout
    '1':
        description: ''
        type: 1
        visible: true
        id: sigsegv
        name: Segmentation Fault
    '2':
        name: Not compile
        description: You code does not compile.
        type: 1
        visible: true
        id: not_compile
    '3':
        type: 1
        id: memory
        visible: true
        description: ''
        name: Memory Exceeded
    '4':
        description: ''
        id: sigfpe
        type: 1
        name: Floating Point Exception
        visible: true
    '5':
        description: Your code produced a double free.
        name: Double free
        visible: true
        id: double_free
        type: 1
    '6':
        type: 1
        id: banned_funcs
        name: Banned functions
        description: You use some banned functions.
        visible: true
    '7':
        visible: true
        description: ''
        type: 2
        name: S2
        id: ''
weight: 1.0
