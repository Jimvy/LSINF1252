/solution/solution.c: |
    #include "student_code.h"
    #include <stdlib.h>
    #include<stdio.h>

    int pop(struct node **head, char **result){
      if (!head)
        return 1;

      struct node* tmp = *head;
      *head = tmp->next;

      *result = tmp->name;
      free(tmp);

      return 0;
    }

    int push(struct node **head, const char *value){
      if (!head)
        return 1;

      struct node *node = (struct node*) malloc(sizeof(struct node));
      if (!node)
        return 1;

      int len = strlen(value)+1;
      node->name = (char*) malloc(len);
      if (!node->name){
        free(node);
        return 1;
      }
      strncpy(node->name, value, len);

      node->next = *head;
      *head = node;

      //char* test = (char*) value;
      //printf("%p\n", &test);
      //printf("%p\n", test);
      //*(test) = 'u';

      //*value = 'u';

      return 0;
    }
/student/student_code.c: |
    #include "student_code.h"
    #include <stdlib.h>
    #include<stdio.h>

    int pop(struct node **head, char **result){
      if (!head)
        return 1;

      struct node* tmp = *head;
      *head = tmp->next;

      *result = tmp->name;
      free(tmp);

      return 0;
    }

    int push(struct node **head, const char *value){
      if (!head)
        return 1;

      struct node *node = (struct node*) malloc(sizeof(struct node));
      if (!node)
        return 1;

      int len = strlen(value)+1;
      node->name = (char*) malloc(len);
      if (!node->name){
        free(node);
        return 1;
      }
      strncpy(node->name, value, len);

      node->next = *head;
      *head = node;

      //char* test = (char*) value;
      //printf("%p\n", &test);
      //printf("%p\n", test);
      //*(test) = 'u';

      //*value = 'u';

      return 0;
    }
/student/student_code.c.tpl: |+
    #include<stdio.h>
    #include<stdlib.h>

    #include "student_code.h"

    int push(struct node **head, const char *name){
        @@push@@
    }

    /*int pop(struct node *head, char **name){
        @@pop@@
    }*/


/student/student_code.h: |
    #include <string.h>

    struct node{
        struct node *next;
        char *name;
    };

    int pop(struct node **head, char **result);

    int push(struct node **head, const char *value);
accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: |
    You are asked to implement the ``pop`` and ``push`` functions of the given `stack <https://en.wikipedia.org/wiki/Stack_(abstract_data_type)>`_ interface.

    .. code-block:: c

        struct node {
            node *next;
            char *name;
        };

    .. image:: https://upload.wikimedia.org/wikipedia/commons/b/b4/Lifo_stack.png
            :align: right
            :height: 540px
            :width: 773px
            :scale: 50%



    *Hints*
    =======
    - @value is also a pointer, it must be allocated.

    - `strncpy <https://linux.die.net/man/3/strncpy>`_

    - `strlen <https://linux.die.net/man/3/strlen>`_

        -- strlen does not count the '\\0' character

    - Don't forget to free **all** the allocated space when popping one element.
environment: cpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S3] Simple stack'
network_grading: false
order: 29
problems:
    push:
        type: code
        header: |-
            .. code-block:: c

                /**
                * Add @name at the "head" of the stack.
                *
                * @head : pointer to the head of the stack
                * @name : pointer to store the popped element
                *
                * @return 0 if no error, 1 else.
                */

                int push(struct node **head, const char *value){
        name: Push
        language: c
    pop:
        language: ''
        header: |-
            .. code-block:: c

                /**
                * Remove the "head" element of the stack and return it's content.
                *
                * @head : pointer to the head of the stack
                * @name : pointer to store the popped element
                *
                * @return 0 if no error, 1 else.
                */

                int pop(struct node **head, char **result){
        type: code
        name: Pop
    free_node:
        language: c
        type: code
        name: <OPTIONAL> free_node
        header: |-
            You can use this question to implement a ``free_node`` function

            .. code-block:: c

                /*
                * Free @node
                */
                void free_node(struct node *node){
        optional: 'on'
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '1':
        id: timeout
        description: Your code exceeds the maximum allowed time.
        name: Timeout
        visible: true
        type: 1
    '2':
        id: sigsegv
        type: 1
        name: Segmentation Fault
        visible: true
        description: ''
    '3':
        id: not_compile
        description: You code does not compile.
        visible: true
        type: 1
        name: Not compile
    '4':
        description: ''
        name: Memory Exceeded
        visible: true
        id: memory
        type: 1
    '5':
        id: sigfpe
        visible: true
        description: ''
        name: Floating Point Exception
        type: 1
    '6':
        description: Your code produced a double free.
        id: double_free
        type: 1
        visible: true
        name: Double free
    '7':
        id: banned_funcs
        name: Banned functions
        description: You use some banned functions.
        type: 1
        visible: true
    '0':
        visible: true
        type: 2
        description: Task dealing with data structures and linked list
        name: Data structures
        id: ''
weight: 1.0
