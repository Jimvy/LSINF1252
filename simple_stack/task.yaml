accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: |
    You are asked to implement the ``pop`` and ``push`` functions of the given `stack <https://en.wikipedia.org/wiki/Stack_(abstract_data_type)>`_ interface.

    .. code-block:: c

        struct node {
            node *next;
            char *name;
        };

    .. image:: https://upload.wikimedia.org/wikipedia/commons/b/b4/Lifo_stack.png
            :align: right
            :height: 540px
            :width: 773px
            :scale: 50%



    *Hints*
    =======
    - @value is also a pointer, it must be allocated.

    - `strncpy <https://linux.die.net/man/3/strncpy>`_

    - `strlen <https://linux.die.net/man/3/strlen>`_

        -- strlen does not count the '\\0' character

    - Don't forget to free **all** the allocated space when popping one element.
environment: cpp
evaluate: best
groups: false
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S3] Simple stack'
network_grading: false
order: 29
problems:
    push:
        type: code
        header: |-
            .. code-block:: c

                /**
                * Add @name at the "head" of the stack.
                *
                * @head : pointer to the head of the stack
                * @name : pointer to store the popped element
                *
                * @return 0 if no error, 1 else.
                */

                int push(struct node **head, const char *value){
        language: c
        name: Push
    pop:
        language: ''
        header: |-
            .. code-block:: c

                /**
                * Remove the "head" element of the stack and return it's content.
                *
                * @head : pointer to the head of the stack
                * @name : pointer to store the popped element
                *
                * @return 0 if no error, 1 else.
                */

                int pop(struct node **head, char **result){
        name: Pop
        type: code
    free_node:
        name: <OPTIONAL> free_node
        language: c
        header: |-
            You can use this question to implement a ``free_node`` function

            .. code-block:: c

                /*
                * Free @node
                */
                void free_node(struct node *node){
        optional: 'on'
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        visible: true
        type: 2
        description: Task dealing with data structures and linked list
        name: Data structures
        id: ''
weight: 1.0
