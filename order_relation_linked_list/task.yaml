accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: Given the provided implementation of a linked list, you are asked to implement
    the ``insert`` function based on a specific order relation. By succeeding this
    task, you will be able to make ordered list like a `LinkedList` with a `Comparator` in `java`.
environment: cpp
evaluate: best
groups: false
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S4] Order relation on a linked list'
network_grading: false
order: 22
problems:
    order_relation:
        type: code
        name: Order relation
        header: |-
            For this subproblem, you are asked to implement the comparison function which rules the order relation of the list.

            .. code-block:: c

                /*
                * @return: 0 if equals, negative number if @b is greater and positive number otherwise
                */
                int compare(char a, char b){
                    //Your code will be inserted here
                }
        language: c
    insert:
        name: Insert
        header: |-
            For this subproblem, you have the template of the structure node:

            .. code-block:: c

                typedef struct node{
                    char val;
                    node_t* next;
                } node_t;

            Starting from this structure, you are asked to implement the following function

            .. code-block:: c

                /*
                * @value: value to be inserted. If the value is already in the list, don't reinsert it.
                * @fun: comparison function which rules the order relation of the list
                * @head: first node of the list, head != NULL
                * @return: 0 if success, -1 otherwise
                */
                int insert(node_t** head, char val, int (*cmp)(char,char)){
                    //Your code will be inserted here
                }
        language: c
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Data structures
        type: 2
        description: Task dealing with data structures and linked list
        visible: true
        id: ''
    '1':
        type: 2
        visible: true
        description: Task about pointers and their use
        name: Pointer
        id: ''
weight: 1.0
