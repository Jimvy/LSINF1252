accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: Given the provided implementation of a linked list, you need to implement
    the ``insert`` function based on a specific order relation. The goal is to implement
    an ordered list similar to a `LinkedList` with a `Comparator` in Java.
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[S4] Ordered  linked list'
network_grading: false
order: 45
problems:
    order_relation:
        language: c
        name: Order relation
        header: |-
            For this subproblem, you need to implement the comparison function which defines the order relationship of the list.

            Write the body of the function *compare*.

            .. code-block:: c

                /*
                * @return: 0 if equals, negative number if @b is greater,
                * and positive number otherwise
                */
                int compare(char a, char b) {
        type: code
    insert:
        header: |
            Assuming following linked list structure :

            .. code-block:: c

                typedef struct node{
                    char val;
                    struct node *next;
                } node_t;

            Write the body of the function ``insert``

            .. code-block:: c

                /*
                * @value: value to be inserted. If the value is already in the list, no element is added and the list is not modified
                * @fun: comparison function which defines the order relationship of the list
                * @head: first node of the list, head != NULL
                * @return: 0 if success, -1 otherwise
                */
                int insert(node_t **head, char val, int (*cmp)(char,char)) {
        name: Insert
        language: c
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        id: timeout
        name: Timeout
        description: Your code exceeds the maximum allowed time.
        type: 1
        visible: true
    '1':
        visible: true
        description: ''
        id: sigsegv
        type: 1
        name: Segmentation Fault
    '2':
        description: You code does not compile.
        name: Not compile
        type: 1
        id: not_compile
        visible: true
    '3':
        visible: true
        name: Memory Exceeded
        type: 1
        id: memory
        description: ''
    '4':
        id: sigfpe
        visible: true
        description: ''
        type: 1
        name: Floating Point Exception
    '5':
        type: 1
        id: double_free
        description: Your code produced a double free.
        name: Double free
        visible: true
    '6':
        description: You use some banned functions.
        id: banned_funcs
        visible: true
        type: 1
        name: Banned functions
    '7':
        description: Task dealing with data structures and linked list
        name: Data structures
        visible: true
        type: 2
        id: ''
    '8':
        visible: true
        description: Task about pointers and their use
        type: 2
        name: Pointer
        id: ''
    '9':
        type: 2
        name: S4
        description: ''
        visible: true
        id: ''
weight: 1.0
