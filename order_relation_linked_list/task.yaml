accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: Given the provided implementation of a linked list, you are asked to implement
    the ``insert`` function based on a specific order relation. The goal is to implement
    an ordered list like type, much like a `LinkedList` with a `Comparator` in Java.
environment: cpp
evaluate: best
groups: false
limits:
    output: '2'
    time: '30'
    memory: '100'
name: '[S4] Order relation on a linked list - REVIEWED'
network_grading: false
order: 43
problems:
    order_relation:
        header: |-
            For this subproblem, you are asked to implement the comparison function which rules the order relation of the list.

            Write the body of the function *compare*.

            .. code-block:: c

                /*
                * @return: 0 if equals, negative number if @b is greater,
                * and positive number otherwise
                */
                int compare(char a, char b) {
        language: c
        type: code
        name: Order relation
    insert:
        language: c
        type: code
        name: Insert
        header: |
            Given the following linked list structure :

            .. code-block:: c

                typedef struct node{
                    char val;
                    node_t *next;
                } node_t;

            Write the body of the function *insert*.

            .. code-block:: c

                /*
                * @value: value to be inserted. If the value is already in the list, don't reinsert it.
                * @fun: comparison function which rules the order relation of the list
                * @head: first node of the list, head != NULL
                * @return: 0 if success, -1 otherwise
                */
                int insert(node_t **head, char val, int (*cmp)(char,char)) {
stored_submissions: 0
submission_limit:
    amount: 8
    period: 1
tags:
    '0':
        type: 1
        name: Timeout
        visible: true
        id: timeout
        description: Your code exceeds the maximum allowed time.
    '1':
        description: ''
        visible: true
        id: sigsegv
        type: 1
        name: Segmentation Fault
    '2':
        visible: true
        type: 1
        id: not_compile
        name: Not compile
        description: You code does not compile.
    '3':
        id: memory
        type: 1
        visible: true
        description: ''
        name: Memory Exceeded
    '4':
        description: ''
        visible: true
        id: sigfpe
        name: Floating Point Exception
        type: 1
    '5':
        visible: true
        type: 1
        description: Your code produced a double free.
        name: Double free
        id: double_free
    '6':
        visible: true
        id: banned_funcs
        name: Banned functions
        type: 1
        description: You use some banned functions.
    '7':
        type: 2
        description: Task dealing with data structures and linked list
        visible: true
        name: Data structures
        id: ''
    '8':
        description: Task about pointers and their use
        visible: true
        type: 2
        name: Pointer
        id: ''
    '9':
        description: ''
        type: 2
        visible: true
        name: S4
        id: ''
weight: 1.0
