accessible: true
author: Mathieu Xhonneux
context: In this exercise, you will familiarize yourself with the functions ``printf(3)``
    (printing in the terminal) and ``sprintf(3)`` (text formatting).
environment: cpp
evaluate: best
groups: false
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S2] Printing data'
network_grading: false
order: 9
problems:
    simple:
        language: c
        header: |-
            The function ``printf`` writes data to the standard output stream (*stdout*).

            Write the body of the function *print_foo* which will print "foo\\n" (without the quotes, the symbol '\\n' represents a **line feed**, i.e. the end of a line) to *stdout*.

            .. code-block:: c

                void print_foo() {
        name: Foo
        type: code
    digit:
        name: Digital
        type: code
        header: |-
            ``printf`` can also print the content of a variable. Write the body of the function *print_digit*.

            .. code-block:: c

                /* print_digit
                 * @n: an integer
                 *
                 * result: print to stdout "The magic number is NUMBER.\n"
                 */
                void print_digit(int number) {
        language: c
    example:
        header: |
            ``printf`` is a powerful formatting tool which can handle several data types, and several formatting parameters.

            What would the following call print to *stdout* ?

            .. code-block:: c

                float PI = 3.1415926;
                printf("pi = %.4f", PI);
        answer: pi = 3.1416
        name: Floating away
        type: match
    sprintf:
        name: sprintf
        type: code
        language: c
        header: |
            ``sprintf(2)`` is a variant of ``printf(2)`` which doesn't write to *stdout*, but instead writes to a *buffer*.

            Write the body of the function *format_str*.

            .. code-block:: c

                /* format_str, example:
                 * format_str(buf, 42, "Olivier", 'B') will write into buf
                 * the string "Mister Olivier B. has 42 eggs" (no line feed)
                 * The given buffer is guaranteed to be big enough
                 */
                void format_str(char *buffer, unsigned int d, char *name, char initial) {
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Timeout
        description: Your code exceeds the maximum allowed time.
        type: 1
        visible: true
        id: timeout
    '1':
        visible: true
        type: 1
        id: sigsegv
        description: ''
        name: Segmentation Fault
    '2':
        description: You code does not compile.
        visible: true
        type: 1
        id: not_compile
        name: Not compile
    '3':
        name: Memory Exceeded
        id: memory
        visible: true
        type: 1
        description: ''
    '4':
        name: Floating Point Exception
        description: ''
        type: 1
        id: sigfpe
        visible: true
    '5':
        visible: true
        name: Double free
        type: 1
        description: Your code produced a double free.
        id: double_free
    '6':
        type: 1
        name: Banned functions
        visible: true
        id: banned_funcs
        description: You use some banned functions.
    '7':
        name: S2
        type: 2
        description: ''
        visible: true
        id: ''
weight: 1.0
