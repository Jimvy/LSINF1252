accessible: true
author: Mathieu Xhonneux
context: In this exercise, you will familiarize yourself with the functions ``printf(3)``
    (printing in the terminal) and ``sprintf(3)`` (text formatting).
environment: cpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S2] Printing data'
network_grading: false
order: 7
problems:
    simple:
        type: code
        header: |-
            The function ``printf`` writes data to the standard output stream (*stdout*).

            Write the body of the function *print_foo* which will print "foo\n" (without the quotes, the symbol '\n' represents a **line feed**, i.e. the end of a line) to *stdout*.

            .. code-block:: c

                void print_foo() {
        name: Foo
        language: c
    digit:
        language: c
        header: |-
            ``printf`` can also print the content of a variable. Write the body of the function *print_digit*.

            .. code-block:: c

                /* print_digit
                 * @n: an integer
                 *
                 * result: print to stdout "The magic number is NUMBER.\n"
                 */
                void print_digit(int number) {
        type: code
        name: Digital
    example:
        name: Floating away
        header: |
            ``printf`` is a powerful formatting tool which can handle several data types, and several formatting parameters.

            What would the following call print to *stdout* ?

            .. code-block:: c

                float PI = 3.1415926;
                printf("pi = %.4f", PI);
        type: match
        answer: '3.1415'
    unsigned-string:
        header: |-
            Print an unsigned char (%u) + string.

            Add QCM : what happens if we use %d with a char n > 127 ?
        name: Unsigned + string
        language: c
        type: code
    sprintf:
        type: code
        name: sprintf
        language: c
        header: |
            Exemple de sprintf :

            Ã©crire dans buffer :

            sprintf(buffer, "Mister %s %c has %d eggs") -> Mister Olivier B. has 42 eggs

            .. code-block:: c

                char *format(char *buffer, unsigned int d, char *name, char initial) {
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
