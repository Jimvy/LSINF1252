/student/tests.c: |
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    void test_alloc(const char* src, const char* ret){

    // Tests
    //-----------------------------------------------------------------

    // check if only one call to malloc
    int ms = stats.malloc.called;
    CU_ASSERT_EQUAL(ms, 1);
    if (ms > 1)
      push_info_msg(_("You used more than one call to malloc"));

    // check if new element is malloced
    int mal = malloced((void*) ret);
    CU_ASSERT_TRUE(mal);
    // if malloced, check the value, else not because it produces buffer overflow due to CUNIT
    if (mal){
      CU_ASSERT_STRING_EQUAL(ret, src);
      if (strncmp(ret, src, strlen(src)) != 0){
        char msg[80];
        sprintf(msg, _("The strings are different.\nExpected string: %s. Received value: %s"), src, ret);
        push_info_msg(msg);
      }
    }
    else
      push_info_msg(_("The returned pointer is not malloced"));

    }

    void test_strcpy_return() {
      set_test_metadata("strcpy_impl", _("Check the returned pointer in normal case"), 1);

      char *ret = NULL;
      char *src = "Chaine de char de test un peu courte mais pas trop quand meme";

      monitored.malloc = true;

      SANDBOX_BEGIN;
      ret = buf_strcpy(src);
      SANDBOX_END;

    test_alloc(src, ret);

    }

    void test_strcpy_nomem() {
      set_test_metadata("strcpy_impl", _("Check the behavior of the function when the call to malloc fails"), 1);

      char *ret = NULL;
      char *src = "Chaine de char de test un peu courte mais pas trop quand meme";

      monitored.malloc = true;
      failures.malloc = FAIL_ALWAYS;

      SANDBOX_BEGIN;
      ret = buf_strcpy(src);
      SANDBOX_END;

      CU_ASSERT_PTR_NULL(ret);
      if (ret)
        push_info_msg(_("The return value of your implementation is wrong"));

    }

    int main(int argc,char** argv)
    {
        BAN_FUNCS();
        RUN(test_strcpy_return, test_strcpy_nomem);
    }
accessible: true
author: Nicolas Rybowski
context: The classic function ``char *strncpy(char *destination, const char *source,
    size_t num);`` (`strcpy (3) <https://linux.die.net/man/3/strcpy>`) needs a destination
    buffer where the source string is copied. We ask you to code a function which
    allocates a buffer itself, and then proceeds to the copy.
environment: pyjavacpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S3] Improved strncpy'
network_grading: false
order: 13
problems:
    strcpy_impl:
        type: code
        header: |
            Write the body of the function *buf_strcpy*.

            .. code-block:: c

                /*
                * Create a buffer the same size as src, and copy the content of src to this buffer.
                *
                * @src: string to be copied
                * @return: return pointer. if src == NULL or in case of error, return NULL
                */
                char *buf_strcpy(const char *src) {
        language: c
        name: buf_strcpy
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
