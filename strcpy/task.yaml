/student/tests.c: |
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    void test_strcpy_return() {
      set_test_metadata("strcpy_impl", _("Check if the string is correctly put in memory"), 1);

      char *ret = NULL;

      const char *stack_src = "Chaine de char de test un peu courte mais pas trop quand meme";
      char *src = (char *)malloc(strlen(stack_src)+1);
      if (src == NULL)
          CU_FAIL("no mem");
      strcpy(src, stack_src);

      monitored.malloc = true;

      SANDBOX_BEGIN;
      ret = buf_strcpy(src);
      SANDBOX_END;

      // Tests
      //-----------------------------------------------------------------

      // check if only one call to malloc
      int ms = stats.malloc.called;
      CU_ASSERT_EQUAL(ms, 1);
      if (ms > 1)
        push_info_msg(_("You used more than one call to malloc"));

      // check if new element is malloced
      int mal = malloced((void*) ret);
      CU_ASSERT_TRUE(mal);
      // if malloced, check the value, else not because it produces buffer overflow due to CUNIT
      if (mal){
          if (strncmp(ret, src, strlen(src) + 1) != 0){
              CU_FAIL("wrong string");
          }
          free(ret);
      }
      else {
        push_info_msg(_("The returned pointer is not malloced"));
        set_tag("malloc_fail");
      }

    }

    void test_strcpy_nomem() {
      set_test_metadata("strcpy_impl", _("Check the behavior of the function when the call to malloc fails"), 1);

      char *ret = NULL;
      char *src = "Chaine de char de test un peu courte mais pas trop quand meme";

      monitored.malloc = true;
      failures.malloc = FAIL_ALWAYS;
      failures.malloc_ret = NULL;

      SANDBOX_BEGIN;
      ret = buf_strcpy(src);
      SANDBOX_END;

      CU_ASSERT_PTR_NULL(ret);
      if (ret){
        push_info_msg(_("The return value of your implementation is wrong"));
        set_tag("malloc_fail");
      }

      free(ret);

    }

    int main(int argc,char** argv)
    {
        BAN_FUNCS();
        RUN(test_strcpy_return, test_strcpy_nomem);
    }
accessible: true
author: Nicolas Rybowski
context: |-
    The classic function ``char *strncpy(char *destination, const char *source, size_t num);`` `strcpy(3) <https://linux.die.net/man/3/strcpy>`_ needs a destination buffer where the source string is copied. We ask you to code a function which allocates a buffer itself, and then proceeds to the copy.

    *Hint*
    ======

    Use `malloc <https://linux.die.net/man/3/malloc>`_
environment: cpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S3] Improved strncpy - CHANGE REQUESTED - malloc(1)'
network_grading: false
order: 26
problems:
    strcpy_impl:
        type: code
        name: buf_strcpy
        language: c
        header: |
            Write the body of the function *buf_strcpy*.

            .. code-block:: c

                /*
                * Create a buffer the same size as src, and copy the content of src to this buffer.
                *
                * @src: string to be copied
                * @return: return pointer. if src == NULL or in case of error, return NULL
                *
                * Take care of '\0' and the working of strlen() (if you use it).
                */
                char *buf_strcpy(const char *src) {
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        id: timeout
        name: Timeout
        visible: true
        type: 1
        description: Your code exceeds the maximum allowed time.
    '1':
        id: sigsegv
        description: ''
        name: Segmentation Fault
        visible: true
        type: 1
    '2':
        id: not_compile
        type: 1
        name: Not compile
        visible: true
        description: You code does not compile.
    '3':
        description: ''
        name: Memory Exceeded
        id: memory
        visible: true
        type: 1
    '4':
        name: Floating Point Exception
        description: ''
        visible: true
        id: sigfpe
        type: 1
    '5':
        id: double_free
        visible: true
        description: Your code produced a double free.
        name: Double free
        type: 1
    '6':
        id: banned_funcs
        description: You use some banned functions.
        type: 1
        visible: true
        name: Banned functions
    '9':
        visible: true
        description: You do not manage the case where malloc() fails.
        type: 1
        id: malloc_fail
        name: Malloc fail
    '7':
        name: S3
        description: ''
        type: 2
        visible: true
        id: ''
    '8':
        name: S3
        description: ''
        visible: true
        type: 2
        id: ''
weight: 1.0
