/run: |
    #!/bin/python3

    # Script d'interface entre INGInious et des tests unitaires écrits à l'aide de CUnit
    # Auteurs : Mathieu Xhonneux, Anthony Gégo
    # Licence : GPLv3

    import subprocess, shlex, re, os
    from inginious import feedback, rst, input

    # Switch working directory to student/
    os.chdir("student")

    # Fetch and save the student code into a file for compilation
    input.parse_template("student_code.c.tpl", "student_code.c")

    # Compilation
    p = subprocess.Popen(shlex.split("make"), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
    make_output = p.communicate()[0].decode('utf-8')
    # If compilation failed, exit with "failed" result
    if p.returncode:
        feedback.set_tag("not_compile", True)
        feedback.set_global_result("failed")
        feedback.set_global_feedback("La compilation de votre code a échoué. Voici le message de sortie de la commande ``make`` :")
        feedback.set_global_feedback(rst.get_codeblock('', make_output), True)
        exit(0)
    else:
        feedback.set_global_result("success")
        feedback.set_global_feedback("- Votre code compile.\n")

    # Parse banned functions
    try:
        banned_funcs = re.findall("BAN_FUNCS\(([a-zA-Z0-9_, ]*)\)", open('tests.c').read())[-1].replace(" ", "").split(",")
        banned_funcs = list(filter(None, banned_funcs))
    except IndexError:
        banned_funcs = []

    if banned_funcs:
        p = subprocess.Popen(shlex.split("readelf -s student_code.o"), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
        readelf_output = p.communicate()[0].decode('utf-8')
        for func in banned_funcs:
            if re.search("UND {}\n".format(func), readelf_output):
                feedback.set_tag("banned_funcs", True)
                feedback.set_global_result("failed")
                feedback.set_global_feedback("Vous utilisez la fonction {}, qui n'est pas autorisée.".format(func))
                exit(0)


    # Remove source files
    subprocess.run("rm -rf *.c *.tpl *.h *.o", shell=True)

    LANG = input.get_input('@lang')

    # Run the code in a parallel container
    p = subprocess.Popen(shlex.split("run_student --time 20 --hard-time 60 ./tests LANGUAGE={}".format(LANG)), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
    o, e = p.communicate()
    print(o.decode("utf-8"))
    # If run failed, exit with "failed" result
    if p.returncode:
        feedback.set_global_result("failed")
        if p.returncode == 256-8:
            montest_output = rst.get_admonition("warning", "**Erreur d'exécution**", "Votre code a produit une erreur. Le signal SIGFPE a été envoyé : *Floating Point Exception*.")
            feedback.set_tag("sigfpe", True)
        elif p.returncode == 256-11:
            montest_output = rst.get_admonition("warning", "**Erreur d'exécution**", "Votre code a produit une erreur. Le signal SIGSEGV a été envoyé : *Segmentation Fault*.")
        elif p.returncode == 252:
            montest_output = rst.get_admonition("warning", "**Erreur d'exécution**", "Votre code a tenté d'allouer plus de mémoire que disponible.")
            feedback.set_tag("memory", True)
        elif p.returncode == 253:
            montest_output = rst.get_admonition("warning", "**Erreur d'exécution**", "Votre code a pris trop de temps pour s'exécuter.")
        else:
            montest_output = rst.get_admonition("warning", "**Erreur d'exécution**", "Votre code a produit une erreur.")
        feedback.set_global_feedback(rst.indent_block(2, montest_output, " "), True)
        exit(0)
    #elif run_output:
    #    feedback.set_global_feedback("- Sortie de votre méthode de test:\n" + rst.indent_block(2, rst.get_codeblock('', run_output), " "), True)

    # Comment to run the tests
    #feedback.set_global_feedback("- **Cette note n'est pas finale.** Une série de tests sera exécutée sur votre code après l'examen.\n", True)
    #exit(0)

    # Fetch CUnit test results
    results_raw = [r.split('#') for r in open('results.txt').read().splitlines()]
    results = [{'pid':r[0], 'code':r[1], 'desc':r[2], 'weight':int(r[3]), 'tags': r[4].split(","), 'info_msgs':r[5:]} for r in results_raw]


    # Produce feedback
    if all([r['code'] == 'SUCCESS' for r in results]):
        feedback.set_global_feedback("\n- Votre code a passé tous les tests.", True)
    else:
        feedback.set_global_feedback("\n- Il y a des erreurs dans votre solution.", True)

    score = 0
    total = 0
    tests_result = {}

    for test in results:
        total += test['weight']
        for tag in test['tags']:
            if tag != "":
                feedback.set_tag(tag, True)
        if test['code'] == 'SUCCESS':
            score += test['weight']
            feedback.set_problem_feedback("* {desc}\n\n  => réussi ({weight}/{weight}) pts)\n\n".format(**test)+("  Info: {}\n\n".format(" — ".join(test['info_msgs'])) if test['info_msgs'] else '\n'),
                    test['pid'], True)
            tests_result[test['pid']] = True if tests_result.get(test['pid'], True) else False
        else:
            feedback.set_problem_feedback("* {desc}\n\n  => échoué (0/{weight}) pts)\n\n".format(**test)+("  Info: {}\n\n".format(" — ".join(test['info_msgs'])) if test['info_msgs'] else '\n'),
                    test['pid'], True)
            tests_result[test['pid']] = False

    for pid, result in tests_result.items():
        if result:
            feedback.set_problem_result("success", pid)
        else:
            feedback.set_problem_result("failed", pid)

    score = 100*score/(total if not total == 0 else 1)
    feedback.set_grade(score)
    feedback.set_global_result("success" if score >= 50 else "failed")
/student/solution.c.sol: |+
    //Open
    int fd1 = open(file_name,O_RDONLY);
    int fd2 = open(new_file_name,O_WRONLY|O_CREAT);
    if(fd1 == -1) return -1;
    if(fd2 == -1) return -1;

    //Permissions
    struct stat st;
    stat(file_name, &st);
    chmod(new_file_name, st.st_mode);

    //Copy
    char c;
    while(read(fd1, (void *) &c, sizeof(char)) >= 1){
        if ((int)write(fd2, (void *) &c, sizeof(char)) == -1)
            return -1;
    }

    //Close
    close(fd1);
    close(fd2);
    return 0;



/student/tests.c: |
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    /*
     * Generate a file named "file.txt".
     * The content is the integers in range [0, n[
     * The sum of integers in the file is returned.
     */
    int gen_file(int n){
        int fd = open("file.txt",O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR);
        if(fd == -1) {
            CU_FAIL(_("Error, can not initialise test file"));
        }
        int array[n];
        int i = 0;
        int sum = 0;
        for (i = 0; i < n; i++){
            array[i]=i;
            sum+=i;
            if (write(fd, (void *) &array[i], sizeof(int)) == -1){
                CU_FAIL(_("Error, can not initialise test file"));
            }
        }
        if (close(fd) == -1)
            CU_FAIL(_("Error, can not initialise test file"));
        return sum;
    }

    void test_open() {
        set_test_metadata("q1", _("Test open"), 1);
        int ret = 0;
        int tag_open = 0;
        //Test with open fail
        monitored.open = true;
        failures.open = FAIL_FIRST;
        failures.open_ret = -1;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt");
        SANDBOX_END;

        if (ret != -1){
            push_info_msg(_("When there is no file, your code does not return -1."));
            CU_FAIL();
            tag_open++;
        }

        //Test if open() return a correct file descriptor.
        gen_file(13);
        monitored.open = true;
        SANDBOX_BEGIN;
        myfunc("file.txt");
        SANDBOX_END;

        if(stats.open.last_return <= 2){
            push_info_msg(_("When the open() should be fine, your code returns -1."));
            CU_FAIL();
            tag_open++;
        }
        if(tag_open == 0){
            set_tag("open");
        }
    }

    void test_no_integer() {
        set_test_metadata("q1", _("Test without any integers."), 1);
        int sum = gen_file(0); //Empty file
        int ret = 0;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt");
        SANDBOX_END;

        if (ret != sum){
            push_info_msg(_("When the file does not contain any integers, your code does not return 0."));
            CU_FAIL();
        }
    }

    void test_some_integers() {
        set_test_metadata("q1", _("Test with some integers."), 2);
        int sum = gen_file(15);
        int ret = 0;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt");
        SANDBOX_END;

        if (ret != sum){
            push_info_msg(_("When the file contains some integers, your code does not return the correct sum."));
            CU_FAIL();
        }
    }

    void test_close() {
        set_test_metadata("q1", _("Test close()."), 1);
        gen_file(2);

        monitored.close = true;
        monitored.open = true;
        SANDBOX_BEGIN;
        myfunc("file.txt");
        SANDBOX_END;

        int close_ok = 0;
        if (stats.close.called == 0){
            push_info_msg(_("You did not close() the file."));
            close_ok++;
            CU_FAIL();
        }if(stats.open.last_return != stats.close.last_params.fd){
            push_info_msg(_("The close() does not close the file you opened before."));
            close_ok++;
            CU_FAIL();
        }if(close_ok == 0){
            set_tag("close");
        }
    }

    int main(int argc,char** argv){
        BAN_FUNCS();
        RUN(test_open, test_no_integer, test_some_integers, test_close);
    }
accessible: true
author: Olivier Martin
context: |-
    Given a file containing some (possibly none) positive integers (``int``), write a code that computes the sum of all integers present in the file. The sum have to be returned.

    If an error occurs, return ``-1``.
environment: cpp
evaluate: best
groups: false
limits:
    time: '30'
    output: '2'
    memory: '100'
name: '[S5] File integers reading'
network_grading: false
order: 25
problems:
    q1:
        type: code
        name: Write your code here
        header: |-
            .. code-block:: java

                /*
                 * @pre filename != NULL, name of the file
                 * @post return the sum of all integers present in the file, -1 if an error occurs.
                 */
                int sum_file(char* filename)
        language: c
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Close
        type: 0
        visible: true
        description: This tag validate that your close are correctly performed.
        id: close
    '1':
        type: 0
        visible: true
        name: Open
        description: This tag validate you are able to open a file and handle errors
            with open().
        id: open
    '11':
        name: Failure handling
        id: failure_handling
        visible: true
        description: You do not manage failures properly during write operations.
        type: 1
    '2':
        name: Banned functions
        description: You use some banned functions.
        id: banned_funcs
        type: 1
        visible: false
    '3':
        name: Double free
        type: 1
        visible: true
        description: Your code produced a double free.
        id: double_free
    '4':
        description: ''
        type: 1
        id: sigfpe
        name: Floating Point Exception
        visible: true
    '5':
        id: memory
        name: Memory Exceeded
        type: 1
        description: ''
        visible: true
    '6':
        id: not_compile
        type: 1
        description: You code do not compile.
        name: Not compile
        visible: true
    '7':
        description: ''
        id: sigsegv
        name: Segmentation Fault
        visible: true
        type: 1
    '8':
        name: Timeout
        id: timeout
        type: 1
        description: Your code exceeds the maximum allowed time.
        visible: true
    '10':
        type: 2
        description: ''
        name: S5
        visible: true
        id: ''
    '9':
        description: ''
        visible: true
        type: 2
        name: File
        id: ''
weight: 1.0
