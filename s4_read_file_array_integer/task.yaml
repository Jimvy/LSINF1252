/student/solution.c.sol: |+
    //Open
    int fd1 = open(file_name,O_RDONLY);
    int fd2 = open(new_file_name,O_WRONLY|O_CREAT);
    if(fd1 == -1) return -1;
    if(fd2 == -1) return -1;

    //Permissions
    struct stat st;
    stat(file_name, &st);
    chmod(new_file_name, st.st_mode);

    //Copy
    char c;
    while(read(fd1, (void *) &c, sizeof(char)) >= 1){
        if ((int)write(fd2, (void *) &c, sizeof(char)) == -1)
            return -1;
    }

    //Close
    close(fd1);
    close(fd2);
    return 0;



/student/tests.c: |
    // CTester template

    #include <stdlib.h>
    #include "student_code.h"
    #include "CTester/CTester.h"

    /*
     * Generate a file named "file.txt".
     * The content is the integers in range [0, n[
     * The sum of integers in the file is returned.
     */
    int gen_file(int n){
        int fd = open("file.txt",O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR);
        if(fd == -1) {
            CU_FAIL(_("Error, can not initialise test file"));
        }
        int array[n];
        int i = 0;
        int sum = 0;
        for (i = 0; i < n; i++){
            array[i]=i;
            sum+=i;
            if (write(fd, (void *) &array[i], sizeof(int)) == -1){
                CU_FAIL(_("Error, can not initialise test file"));
            }
        }
        if (close(fd) == -1)
            CU_FAIL(_("Error, can not initialise test file"));
        return sum;
    }

    void test_no_file() {
        set_test_metadata("q1", _("Test with no file"), 1);
        int ret = 0;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt");
        SANDBOX_END;

        if (ret != -1){
            push_info_msg(_("When there is no file, your code does not return -1."));
            CU_FAIL();
        }else{
            set_tag("open");
        }
    }

    void test_open() {
        set_test_metadata("q1", _("Test open"), 1);
        int ret = 0;

        monitored.open = true;
        failures.open = FAIL_FIRST;
        failures.open_ret = -1;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt");
        SANDBOX_END;

        if (ret != -1){
            push_info_msg(_("When there is no file, your code does not return -1."));
            CU_FAIL();
        }else{
            set_tag("open");
        }

        monitored.open = true;
        SANDBOX_BEGIN;
        myfunc("file.txt");
        SANDBOX_END;

        if(stats.open.last_return == -1){
            push_info_msg(_("When the open() should be fine, your code returns -1."));
            CU_FAIL();
        }
    }

    void test_no_integer() {
        set_test_metadata("q1", _("Test without any integers."), 1);
        int sum = gen_file(0);
        int ret = 0;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt");
        SANDBOX_END;

        if (ret != sum){
            push_info_msg(_("When the file does not contain any integers, your code does not return 0."));
            CU_FAIL();
        }
    }

    void test_some_integers() {
        set_test_metadata("q1", _("Test with some integers."), 2);
        int sum = gen_file(12);
        int ret = 0;

        SANDBOX_BEGIN;
        ret = myfunc("file.txt");
        SANDBOX_END;

        if (ret != sum){
            push_info_msg(_("When the file contains some integers, your code does not return the correct sum."));
            CU_FAIL();
        }
    }

    void test_close() {
        set_test_metadata("q1", _("Test close()."), 1);
        gen_file(2);

        monitored.close = true;
        monitored.open = true;
        SANDBOX_BEGIN;
        myfunc("file.txt");
        SANDBOX_END;

        int close_ok = 0;
        if (stats.close.called == 0){
            push_info_msg(_("You did not close() the file."));
            close_ok++;
            CU_FAIL();
        }if(stats.open.last_return != stats.close.last_params.fd){
            push_info_msg(_("The close() does not close the file you opened before."));
            close_ok++;
            CU_FAIL();
        }if(close_ok == 0){
            set_tag("close");
        }
    }

    int main(int argc,char** argv){
        BAN_FUNCS();
        RUN(test_no_file, test_open, test_no_integer, test_some_integers, test_close);
    }
accessible: true
author: Olivier Martin
context: |-
    Given a file containing some (possibly none) positive integers (``int``), write a code that computes the sum of all integers present in the file. The sum have to be returned.

    If an error occurs, return ``-1``.
environment: cpp
evaluate: best
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S5] File integers reading'
network_grading: false
order: 25
problems:
    q1:
        name: Write your code here
        language: c
        type: code
        header: |-
            .. code-block:: java

                /*
                 * @pre filename != NULL, name of the file
                 * @post return the sum of all integers present in the file, -1 if an error occurs.
                 */
                int sum_file(char* filename)
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Close
        type: 0
        id: close
        visible: true
        description: This tag validate that your close are correctly performed.
    '1':
        type: 0
        visible: true
        name: Open
        id: open
        description: This tag validate you are able to open a file and handle errors
            with open().
    '2':
        name: Banned functions
        id: banned_funcs
        description: You use some banned functions.
        type: 1
        visible: false
    '3':
        name: Double free
        visible: true
        description: Your code produced a double free.
        type: 1
        id: double_free
    '4':
        id: sigfpe
        name: Floating Point Exception
        description: ''
        visible: true
        type: 1
    '5':
        visible: true
        id: memory
        name: Memory Exceeded
        type: 1
        description: ''
    '6':
        id: not_compile
        name: Not compile
        type: 1
        description: You code do not compile.
        visible: true
    '7':
        description: ''
        visible: true
        type: 1
        name: Segmentation Fault
        id: sigsegv
    '8':
        id: timeout
        type: 1
        description: Your code exceeds the maximum allowed time.
        name: Timeout
        visible: true
    '10':
        name: S5
        type: 2
        description: ''
        visible: true
        id: ''
    '9':
        visible: true
        name: File
        type: 2
        description: ''
        id: ''
weight: 1.0
